Code flow:-

index.html
index.mxml
mainApplicationScript.as
 |- claimStartScript.as
  -> claimHandlerScript.as (claimInit() -> also adds text "what is your claim?", the left-arrow.png image and x,y numbers)
     -> ClaimBox.mxml
     -> claimBoxScript.as (assigns 'Particular' statement directly. does not go to statementPromptScript which is supposed to do this)
        -> DynamicTestArea.as
        -> acceptClaim()    // this is where the claimbox changes to have 2 buttons on bottom 1.add.. 2.use as..
  -> reasonHandlerScript.as (reasonInit()) -- init array reasonText[], reasonAccepted event
     -> ReasonBox.mxml
     -> reasonBoxScript.as (assigns 'Particular' statement directly)
     -> add argument scheme -- breaks here
  -> inferenceHandlerScript.as (inferenceInit())
     -> init array inferenceText[]
  -> SchemeSelector.mxml
     -> schemeSelectorScript.as
       -> schemeService.getSchemeClasses(_selectedLogicName) //this function defined in the mxml file
       -> dispatchEvent(schemeSelectedEvent) //this sends event info regarding arg scheme and language type to main application. logic scripts are run
     -> main schemes : onRollOver/onClick - getSchemeLanguages(event)
     -> selecting arguments: rollOver - rollOverLanguageType(event), click - acceptLanguageType(event) ->calls-> getLanguageFunction back in mxml file ->calls->sendScheme(itemRollOver and itemClick are from ListEvent)
  -> PromptLabel.mxml
     -> promptLabelScript.as
 |- schemeStartScript.as
  -> StatementPrompt.mxml, SchemeSelector.mxml
     -> schemeSelectedEvent.as (for "rollover" and "schemeaccepted")
 |- (other 2 under prototype construction)

ResultEvent.as
 |-SchemeSelectedEvent.as (is passed on variables from schemeSelectorScript)



web display file and events in it <--> source :-

SchemeSelector.mxml <--> scripts/schemeSelectorScript.as
events invoked
 |- schemeAccepted <--> events/SchemeSelectedEvent.as
 |- schemeRollOver <--> events/SchemeSelectedEvent.as
 
StatementPrompt.mxml <--> scripts/statementPromptScript.as
events invoked
 |- statementClassified <--> events/StatementClassifierEvent.as

ArgScheme.mxml <--> scripts/argSchemeScript.as
events invoked: 
 |- changeScheme <--> events/SchemeChangeEvent.as
 
ClaimBox.mxml <--> scripts/claimBoxScript.as
events invoked
 |- claimAccepted <--> events/StatementAcceptEvent.as
 
InferenceBox.mxml <--> scripts/inferenceBoxScript.as
events invoked
 |- inferenceAccepted <--> events/StatementAcceptEvent.as
refers to 'inferenceService' with functions 'storeInference() and 'updateInference()'

ReasonBox.mxml <--> scripts/reasonBoxScript.as
events invoked
 |- reasonAccepted <--> events/StatementAcceptEvent.as
refers to 'reasonService' with functions 'acceptReason()', 'updateReason()' and 'displayReason()'
 
CustomImage.mxml <--> scripts/customImageScript.as
static element _imageSource

CustomLine.mxml <--> scripts/customLine.as

PromptLabel.mxml <--> scripts/promptLabelScript.as



