<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="955" minHeight="600" applicationComplete="loadData();" xmlns:components="components.*" >
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<mx:Canvas id="agoraMenu" width="800" minHeight="600" name="agoraMenu">
		<s:VGroup id="Agora">
			<s:HGroup paddingLeft="25" paddingTop="25">
				<s:Label text="Welcome to AGORA...">
				</s:Label>	
			</s:HGroup>
			<s:HGroup id="mainPanel" paddingLeft="25" paddingTop="25" paddingRight="25" paddingBottom="25">
				
				<s:Panel id="mapList" title="List of Maps" width="200" height="400">
					<s:Scroller height="100%" width="100%">
						<s:Group>
							<s:VGroup id="mapNameList" gap="5" paddingTop="5" paddingLeft="5" width="90%"> 
							</s:VGroup>	
						</s:Group>
							
					</s:Scroller>
				</s:Panel>
				
				<components:MyMapsPanel id="myMaps" title="My Maps" skinClass="components.MyMapsSkin"></components:MyMapsPanel>
				
				<s:Panel  id="projects" title="Projects" width="200" minHeight="400">	
				</s:Panel>
			</s:HGroup>
			<s:HGroup paddingLeft="25" paddingTop="25">
				<s:Button id="createMapBtn" label="Create Map">
				</s:Button >
				<s:Button id="createProjectBtn" label="Create Project">
				</s:Button>
			</s:HGroup>
		</s:VGroup>	
	</mx:Canvas>

	
	<fx:Script>
		<![CDATA[
			import classes.AgoraMap;
			import classes.ArgumentPanel;
			import classes.UserData;
			
			import components.LAMWorld;
			import components.LoginWindow;
			import components.Map;
			import components.MapName;
			
			import mx.controls.Alert;
			import mx.managers.PopUpManager;
			public var username:String;
			public var pass_hash:String;
			
			public var maps_map:Dictionary;
			
			public var presetMapName:String;
			
			
			public function createmap():void
			{
				var mapNameDialog:MapName = new MapName;
				PopUpManager.addPopUp(mapNameDialog,this,true);
				PopUpManager.centerPopUp(mapNameDialog);
				var lamWorld:LAMWorld = new LAMWorld;
				agoraMenu.visible = false;
				addElement(lamWorld);
			}
			
			
			public function onVerification(event:Event):void
			{
				createmap();
			}
			
			
			public function createMap(event:MouseEvent):void
			{
				if(!UserData.isValid())
				{
					var loginWindow:LoginWindow = new LoginWindow;
					PopUpManager.addPopUp(loginWindow,this,true);
					PopUpManager.centerPopUp(loginWindow);
					loginWindow.addEventListener("verification",onVerification);
					loginWindow.addEventListener("verification",function (event:Event):void{loadMyMapList();});
				}
				else{
					createmap();
				}
			}
			
			public function showMenu():void
			{
				agoraMenu.visible = true;
			}
			
			protected function drawMap(event:Event):void
			{
				trace("In draw map");
				agoraMenu.visible = false;
				var xml:XML = XML(event.target.data);
				var map:Map = new Map;
				addElement(map);
				//trace(xml.toXMLString());
				ArgumentPanel.parentMap = map.agoraMap;
				map.agoraMap.load(xml);
			}
			
			public function displayMap(button:Button):void
			{
				//var button:Button = Button(event.target);
				var mapId:int = int(button.name);
				var request:URLRequest = new URLRequest;
				request.url="http://agora.gatech.edu/dev/load_map.php";
				request.method = URLRequestMethod.GET;
				request.data = new URLVariables("timestamp=0&map_id="+mapId);
				var loader:URLLoader = new URLLoader;
				loader.addEventListener(Event.COMPLETE, drawMap);
				loader.addEventListener(IOErrorEvent.IO_ERROR,function(event:IOErrorEvent):void{Alert.show("Network error");});			
				loader.load(request);
				
			}
			
			public function loadMyMapList():void
			{
				if(UserData.isValid())
				{
					var request:URLRequest = new URLRequest;
					request.url="http://agora.gatech.edu/dev/my_maps.php";
					request.method = URLRequestMethod.GET;
					request.data = new URLVariables("uid="+UserData.uid+"&"+"pass_hash="+UserData.passHashStr);
					var loader:URLLoader = new URLLoader;
					loader.addEventListener(Event.COMPLETE, function(event:Event):void{
						myMaps.mapListXML = XML(event.target.data);
						myMaps.skinState = true;
					});
					loader.addEventListener(IOErrorEvent.IO_ERROR,function(event:IOErrorEvent):void{Alert.show("Network error");});			
					loader.load(request);
				}
			}
			
			protected function loadMap(event:MouseEvent):void{
				if(!UserData.isValid())
				{
					var loginWindow:LoginWindow = new LoginWindow;
					PopUpManager.addPopUp(loginWindow,this,true);
					PopUpManager.centerPopUp(loginWindow);
					loginWindow.addEventListener("verification", function ( e:Event):void{ displayMap(Button(event.target)); });
					//loginWindow.addEventListener("verification", loadMyMapList);
				}
				else
				{
					displayMap(Button(event.target));
				}
				
			}

			
			public function displayMaps(event: Event):void
			{
				var xmlData:XML = XML(event.target.data);
				var maps:XMLList = xmlData.map;
				for each (var map:XML in maps)
				{
					    try{
							if(map.@is_deleted == "1"){
								continue;
							}
						}catch(error:Error){
							trace("is_deleted not available yet");
						}
						var mapObject:Object = new Object;
						mapObject.mapId = int(map.attribute("ID"));
						mapObject.title = map.attribute("title");
						var mapButton:Button = new Button;
						mapButton.width = 170;
						mapButton.name = mapObject.mapId.toString();
						mapButton.addEventListener(MouseEvent.CLICK, loadMap);
						mapButton.label = mapObject.title;
						mapNameList.addElement(mapButton);
						maps_map[mapObject.mapId] = mapObject;
				}
			}

			private function errorHandler(event:IOErrorEvent):void
			{
				Alert.show("A communication error occurred duing interaction with server");

			}
			
			public function loadMapList():void
			{
				//create a request object
				var request:URLRequest = new URLRequest;
				request.url="http://agora.gatech.edu/dev/list_maps.php";
				request.method = URLRequestMethod.GET;
				
				//create a loader
				var loader:URLLoader = new URLLoader;
				//add a handler for handling the response
				loader.addEventListener(Event.COMPLETE,displayMaps);
				loader.addEventListener(IOErrorEvent.IO_ERROR,errorHandler);
				
				//load the request obect
				loader.load(request);
				
				//registerEventHandler for createMap
				createMapBtn.addEventListener(MouseEvent.CLICK,createMap);
				//myMaps.invalidateSkinState();
				//myMaps.invalidateProperties();
				
				
			}
			
			public function loadProjectList():void
			{
			
			}
			
			public function loadData():void
			{
				maps_map = new Dictionary;
				loadMapList();
				loadProjectList();
			}
			
		]]>
	</fx:Script>
</s:Application>
