<?xml version="1.0" encoding="utf-8"?>
	<!--
	- 	Index is the main function of the program. When FB builds the program, it automatically creates an html file
	- 	that, when opened, hosts index.mxml. For that reason, the major components need to go here.
	-->
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:components="components.*"
			   minWidth="800" minHeight="600"
			   applicationComplete="application1_applicationCompleteHandler(event)"
			   pageTitle="Welcome to AGORA" preinitialize="application_preinitializeHandler(event)"
			   resize="application1_resizeHandler(event)">
	<fx:Style source="styles.css"/>

	<fx:Declarations>
	</fx:Declarations>
	
		<s:Group id="mainGroup" percentWidth="80">
			<!--Adds a visible AGORALogin object to the main index panel-->
			<components:AGORALogin id="agoraMain" visible="true" percentWidth="80" percentHeight="100" name="agoraMain"/>
			<!--Adds an invisible AGORAMenu object to the main index panel-->
			<components:AGORAMenu id="agoraMenu" name="agoraMenu" visible="false" percentWidth="100" percentHeight="100"
								  verticalCenter="0" horizontalCenter="0"/>
			<!--Adds an invisible map object to the main index panel-->
			<components:Map id="map" name="map" visible="false"/>
			<!--The panel that goes on the right side of the screen-->
			<components:RightSidePanel id="rightSidePanel" visible="false" percentHeight="100" right="0"/>
		</s:Group>
		

	<fx:Script>
		<![CDATA[
			import Controller.LayoutController;
			
			import Model.AGORAModel;
			

			import components.LoginWindow;
			import components.Map;
			import components.MapName;
			import components.MapToProject;
			import components.ProjectName;
			import components.PublishMapPopUpPanel;
			import components.RegisterPanel;
			
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			
			/*
			* NOTE:
			* 
			* All the universally accessible objects other than model are instantiated just prior
			* to use and then set to null in order to be GC'd. This is a better method
			* because the memory traces can be cleaned and reused as necessary
			* instead of having the object just sitting in memory for no reason. 
			* The key takeaway is that these globals are rarely used (very specific
			* times and events) so freeing the memory by setting it to null helps to
			* speed up the program, even if it is a small fraction of speed up.
			*
			* Model is instantiated in this class and then called through FlexGlobals (like the others) 
			* but does not require instantiation because this class instantiates it when it is created.
			* Because of this, a model object is always sitting in memory but hardly ever used. See the
			* FlexDoc for the method application_preinitializeHandler below for more info.
			*/
			
			//This is a universal AGORAModel that can be accessed by FlexGlobals.topLevelApplication.model
			private var model:AGORAModel;
			//This is a universal LoginWindow that can be accessed by FlexGlobals.topLevelApplication.loginWindow
			public var loginWindow:LoginWindow;
			//This is a universal RegistrationPanel that can be accessed by FlexGlobals.topLevelApplication.registrationWindow
			public var registrationWindow:RegisterPanel;
			
			/*
			* The 4 universal components below are misplaced at best. Violate the MVC. So do the above 3, really
			* --Zach
			*/
			
			//Universally accessible mapName box
			public var mapNameBox:MapName;
			//Universally accessible projectName box
			public var projectNameBox:ProjectName;
			//Universal Join_Project box
			//Universal moveMapToProject box
			public var move_map:MapToProject;
			
			public var publishMap:PublishMapPopUpPanel;
			


			/**
			 * Runs when the object is instantiated. This instantiates the universal "model"
			 * 
			 * NOTE:
			 * 
			 * This is used sporadically at best. Most of the time the code just uses
			 * var model:AGORAModel = AGORAModel.getInstance() and bypass the need to
			 * use the global model all together. However, there are places in the
			 * code where the reference to model IS used so we have to keep this in
			 * until we code search and remove these. 
			 */
			protected function application_preinitializeHandler(event:FlexEvent):void
			{
				model = AGORAModel.getInstance();
			}
			
			/**
			 * Runs when the onject is instantiated. This function sets the various layout
			 * properties of the UI by calling LayouController's method 
			 * setApplicationLayoutProperties.
			 */
			protected function application1_applicationCompleteHandler(event:FlexEvent):void
			{
				LayoutController.getInstance().setApplicationLayoutProperties();
			}
			
			/**
			 * Listens for resize events and does a lot of amazing work. Believe me, just read below. It is amazing...
			 * 
			 * For some reason, flex does not adjust the width and height of the screen components during every resize
			 * event and because of that, this was created. Basically, forcing the screen to be full screen at every
			 * resize.
			 */
			protected function application1_resizeHandler(event:ResizeEvent):void
			{
				if(stage){
					//Sets the width of the login window
					agoraMain.percentHeight = 100;
					agoraMain.percentWidth = 80;
					//Adjusts the elements if the screen resolution drops
					//below the correct threshold
					if(rightSidePanel.x < 1080){
						agoraMenu.horizontalCenter = undefined;
						agoraMenu.left = 0;
					}
					else{
						agoraMenu.left = undefined;
						agoraMenu.horizontalCenter = 0;
					}
			
				}				
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void{
				super.updateDisplayList(unscaledWidth,unscaledHeight);
			}
			


			
			
			
		]]>
	</fx:Script>
	


</s:Application>
