<?xml version="1.0" encoding="utf-8"?>
<!--
This is an application to test the AgoraPanel class. It also 
draws a line over the canvas. It has to be made a separate 
class, and will be done soon.
-->
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:classes="classes.*"
			   xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="955" minHeight="600" creationComplete="initApp()">
	<fx:Declarations>
	</fx:Declarations>
	
		<s:VGroup>
			<s:HGroup>
			<s:Button label="Add a Component" id="add_btn" click="buttonClicked()">
			</s:Button>
			<s:Label text="X coordinate" id="x_lbl">
			</s:Label>
			<s:TextInput id="x_txt">
			</s:TextInput>
			
			<s:Label text="Y coordinate" id="y_lbl">
			</s:Label>
			<s:TextInput id="y_txt">
			</s:TextInput>
				
			<s:TextInput id="display_string" text="default_text">
			</s:TextInput>
				
			<s:TextInput id="direction_txt" text="">
	
			</s:TextInput>
			</s:HGroup>
	<mx:Canvas id="ustage" backgroundColor="0xaaaaaa" height="600" width="800">	
	</mx:Canvas>
	</s:VGroup>
	<fx:Script>
		<![CDATA[
			import classes.ALayoutManager;
			import classes.ArgumentPanel;
			
			import mx.binding.utils.BindingUtils;
			import mx.containers.Canvas;
			import mx.containers.Panel;
			import mx.controls.Alert;
			import mx.core.DragSource;
			import mx.core.IUIComponent;
			import mx.core.UIComponent;
			import mx.core.mx_internal;
			import mx.events.CalendarLayoutChangeEvent;
			import mx.events.DragEvent;
			import mx.managers.DragManager;
			
			import spark.primitives.Graphic;
			public var drawUtility:UIComponent;
			public var numComponentsX:int;
			public var numComponentsY:int;
			public var layoutManager:ALayoutManager;
			
			public var listOfPanels:Vector.<ArgumentPanel>;
			public var howMany:int;
			
			public function buttonClicked():void
			{
				var tmp:ArgumentPanel = new ArgumentPanel();
				//tmp.
				var tgridX:int;
				var tgridY:int;
				//tmp.input1.text = display_string.text;
				tgridX = int(x_txt.text);
				tgridY = int(y_txt.text);
				ustage.addElement(tmp);
				ustage.validateSize(true);
				layoutManager.positionArgumentPanel(listOfPanels,tmp,tgridX,tgridY);
			}
			
			public function initApp():void
			{
				layoutManager = new ALayoutManager;
				ustage.addEventListener(DragEvent.DRAG_ENTER,acceptDrop);
				ustage.addEventListener(DragEvent.DRAG_DROP, handleDrop );	
				drawUtility = new UIComponent;
				ustage.addElement(drawUtility);
				listOfPanels = new Vector.<ArgumentPanel>(0,false);
				howMany=0;
			}
			
			
			public function acceptDrop(d:DragEvent):void
			{
				DragManager.acceptDragDrop(Canvas(d.currentTarget));
			}
			
			
			public function handleDrop(dragEvent:DragEvent):void
			{	
				try{
				var currentStage:Canvas = Canvas(dragEvent.currentTarget);
				var akcdragInitiator:ArgumentPanel = ArgumentPanel(dragEvent.dragInitiator);
				var dragSource:DragSource = dragEvent.dragSource;
				var tmpx:int = int(dragSource.dataForFormat("x"));
				var tmpy:int = int(dragSource.dataForFormat("y"));
				//
				tmpx = currentStage.mouseX -  tmpx;
				tmpy = currentStage.mouseY - tmpy;
				var tmpGridX:int = layoutManager.getGridPositionX(tmpy);//In the logical co ordinates x and y are along different axes
				var tmpGridY:int = layoutManager.getGridPositionY(tmpx);//Got to change this though ;-)
				//
				//akcdragInitiator.x = currentStage.mouseX -  tmpx;
				//akcdragInitiator.y = currentStage.mouseY - tmpy;
				akcdragInitiator.gridX = tmpGridX;
				akcdragInitiator.gridY = tmpGridY;
				layoutManager.layoutComponents(listOfPanels);
				akcdragInitiator.validateNow();
			}catch(error:Error)
			{
				Alert.show(error.message.toString());
			}
		}
			
		]]>
	</fx:Script>
	
</s:Application>