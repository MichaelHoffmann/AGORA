<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
					  xmlns:s="library://ns.adobe.com/flex/spark"
					  xmlns:mx="library://ns.adobe.com/flex/mx"
					  xmlns:components="components.*"
					  width="255" height="682"
					  backgroundColor="#29ABE2"
					  >
	<fx:Script>


		<![CDATA[
			import Controller.AGORAController;
			import Controller.ArgumentController;
			import Controller.UpdateController;
			import Controller.UserSessionController;
			
			import Model.AGORAModel;
			import Model.UserSessionModel;
			
			import ValueObjects.MapHistoryValueObject;
			import classes.Language;
			
			import mx.collections.ArrayList;
			import mx.containers.TabNavigator;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			[Bindable] private var visibility:Map = FlexGlobals.topLevelApplication.map;
			[Bindable] private var onMyMapsTab:TabNavigator = FlexGlobals.topLevelApplication.agoraMenu.tabNav;
			private var _showHistoryBoxes = false;
			
			public function get showHistoryBoxes()
			{
				return _showHistoryBoxes;
			}
			public function set showHistoryBoxes(value):void
			{
				_showHistoryBoxes = value;
			}
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void{
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				// 
				if(showHistoryBoxes){
					showHistoryBoxes=false;
					return;
				}
				var xB:int = 0;
				hidePanelButton.move(2, xB);
				xB = xB + hidePanelButton.getExplicitOrMeasuredHeight() + 3;
				youAreHereLabel.setActualSize(youAreHereLabel.getExplicitOrMeasuredWidth(), youAreHereLabel.getExplicitOrMeasuredHeight());
				youAreHereLabel.move(2, xB);
				xB = xB + youAreHereLabel.getExplicitOrMeasuredHeight() + 3;
				var selectedTab:String= AGORAModel.getInstance().userSessionModel.selectedTab;
				
				categoryChain.setActualSize(categoryChain.getExplicitOrMeasuredWidth(), categoryChain.getExplicitOrMeasuredHeight());
				categoryChain.move(2, xB);
				xB = xB+categoryChain.getExplicitOrMeasuredHeight()+5;
				
				if(visibility.visible){
					mapOwner.visible = true;
					mapTitle.visible = true;
					titleOfMap.visible = true;
					clickableMapOwnerInformation.visible = true;
					chatBox.visible=true;
					historyBox.visible=true;
					historyBackBox.visible=true;
					chat.visible=true;
					history.visible=false;
									
				} else {
					mapOwner.visible = false;
					mapTitle.visible = false;
					titleOfMap.visible = false;
					clickableMapOwnerInformation.visible = false;
					chatBox.visible=false;
					historyBox.visible=false;
					historyBackBox.visible=false;
					chat.visible=true;
					history.visible=false;
				}
				mapOwner.setActualSize(mapOwner.getExplicitOrMeasuredWidth(), mapOwner.getExplicitOrMeasuredHeight());
				mapOwner.move(2, xB);
				clickableMapOwnerInformation.setActualSize
					(clickableMapOwnerInformation.getExplicitOrMeasuredWidth(), clickableMapOwnerInformation.getExplicitOrMeasuredHeight());
				clickableMapOwnerInformation.move(mapOwner.getExplicitOrMeasuredWidth()+3, xB - 4);
				xB = xB + clickableMapOwnerInformation.getExplicitOrMeasuredHeight() + 3;
				titleOfMap.setActualSize(titleOfMap.getExplicitOrMeasuredWidth(), titleOfMap.getExplicitOrMeasuredHeight());
				titleOfMap.move(2,xB);
				xB = xB + titleOfMap.getExplicitOrMeasuredHeight() + 1;
				mapTitle.setActualSize(mapTitle.getExplicitOrMeasuredWidth(), mapTitle.getExplicitOrMeasuredHeight());
				mapTitle.move(2, xB);
				xB = xB + mapTitle.getExplicitOrMeasuredHeight() + 25;
			//	if(visibility.visible){
				chatBox.setActualSize(chatBox.getExplicitOrMeasuredWidth(), chatBox.getExplicitOrMeasuredHeight());
				chatBox.move(2, xB); 
				historyBox.setActualSize(historyBox.getExplicitOrMeasuredWidth(), historyBox.getExplicitOrMeasuredHeight());
				historyBox.move(chatBox.getExplicitOrMeasuredWidth()+10, xB);
				historyBackBox.setActualSize(historyBackBox.getExplicitOrMeasuredWidth(), historyBackBox.getExplicitOrMeasuredHeight());
				historyBackBox.move(chatBox.getExplicitOrMeasuredWidth()+20+historyBox.getExplicitOrMeasuredWidth(), xB); 	
				xB = xB + historyBox.getExplicitOrMeasuredHeight() + 10;		
			//	}
				chat.setActualSize(chat.getExplicitOrMeasuredWidth(), chat.getExplicitOrMeasuredHeight());
				chat.move(2, xB); 
							history.setActualSize(history.getExplicitOrMeasuredWidth(), history.getExplicitOrMeasuredHeight());
				history.move(2, xB); 
				// test if the history is empty
				var mapList:Vector.<MapHistoryValueObject> = AGORAModel.getInstance().agoraMapModel.historylist;
				var sessionMappings:UserSessionModel =  AGORAModel.getInstance().userSessionModel;
				if((mapList==null || mapList.length<=0) && sessionMappings.historyMapsVisited.length<=0){
					historyBox.visible=false;
					historyBackBox.visible=false;
				}
			//	xB = xB + chat.getExplicitOrMeasuredHeight();
				
			}
			public function differentData():void{
				
			}
			
			protected function mapTitle_focusInHandler(event:FocusEvent):void
			{
				this.addEventListener(KeyboardEvent.KEY_DOWN, onEnter);
				
			}
			
			protected function mapTitle_focusOutHandler(event:FocusEvent):void
			{
				this.removeEventListener(KeyboardEvent.KEY_DOWN, onEnter);
				
			}
			
			public function flipCategoryChainVisibility():void{
				this.categoryChain.visible = !this.categoryChain.visible;
				this.youAreHereLabel.visible = !this.youAreHereLabel.visible;
			}
			
			protected function onEnter(event:KeyboardEvent):void{
				if(event.keyCode == Keyboard.ENTER && AGORAModel.getInstance().userSessionModel._uid != -1){ //AGORAModel.getInstance().agoraMapModel.o){
					mapTitle.text = mapTitle.text.replace("\n","");
					mapTitle.text = mapTitle.text.replace("\r","");
					Alert.cancelLabel = Language.lookup("Back");
					Alert.show(Language.lookup("ChangeMapName"), "", Alert.OK|Alert.CANCEL, null, 
						function(event:CloseEvent):void{
							if(event.detail == Alert.OK){
								UpdateController.getInstance().updateMapInfo(mapTitle.text);	
							}
							
						});				
				}
			}
			
			protected function onChatSelect():void{
				chat.visible=true;
				history.visible=false;
			}
			
			protected function onHistorySelect():void{
				history.visible=true;
				chat.visible=false;
			}
			protected function onHistoryBackSelect():void{
			var rsp:RightSidePanel = FlexGlobals.topLevelApplication.rightSidePanel;
			var thisMapInfo:UserSessionModel =  AGORAModel.getInstance().userSessionModel;
			
			// check for the length
			if(thisMapInfo.historyMapsVisited.length<=0){
				return;
			}
			// pop the latest push and invoke the call
			var mapInfo =thisMapInfo.historyMapsVisited.pop();
			ArgumentController.getInstance().loadMapMain(mapInfo,false);
			}
		]]>
		
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>		
	<components:ChatWindow id="chat" visible="true" left="5" right="5" horizontalCenter="0" height="100"/>
	<components:MapHistory id="history" visible="false"  left="5" right="5" horizontalCenter="0" height="100"/>
	<s:Label id="mapOwner" text="{Language.lookup('OwnerOfMap')}" visible="false"/>
	<s:Button id="clickableMapOwnerInformation" visible="false" toolTip="{Language.lookup('MapOwnerURLWarning')}"/>
	<s:TextArea id="mapTitle" visible="false" enabled="false" heightInLines="2" focusIn="mapTitle_focusInHandler(event)" focusOut="mapTitle_focusOutHandler(event)"/>
	<!-- toggle for chat / history -->
	<s:Button id="hidePanelButton" left="5" top="0" right="5" label="{Language.lookup('HidePanel')}" percentWidth="100"
			  click="{
			  		this.visible = false; 
			  		FlexGlobals.topLevelApplication.map.agora.width = stage.stageWidth;
			  		FlexGlobals.topLevelApplication.map.agora.height = stage.stageHeight - FlexGlobals.topLevelApplication.map.topPanel.height - 25;
			  		FlexGlobals.topLevelApplication.map.topPanel._unhideRSP.visible = true;
			  }"/>
	<s:Label id="youAreHereLabel" text="{Language.lookup('YouAreHere')}" visible="{!onMyMapsTab.getTabAt(1).visible}"/>
	<s:Label id="titleOfMap" text="{Language.lookup('TitleClickToChange')}" visible="false"/>
	<components:CategoryChain id="categoryChain" visible="{!onMyMapsTab.getTabAt(1).visible}"/>
	<s:Button id="chatBox" visible="false" toolTip="" label="Chat" width="75" click="onChatSelect()"/>
	<s:Button id="historyBox" visible="false" toolTip="" label="{Language.lookup('MapHistoryHeader')}" width="75" click="onHistorySelect()"/>
	<s:Button id="historyBackBox" visible="false" label="&lt; -" toolTip="{Language.lookup('MapHistoryBackButtonToolTip')}" width="35" click="onHistoryBackSelect()"/>
	<components:SponsorPanel visible="false" id="sponsorPanel" height="75" width="200" bottom="0" horizontalCenter="0"/>
	
	
</s:SkinnableContainer>