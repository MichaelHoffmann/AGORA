<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:components="components.*"
		 width="1166" height="596" creationComplete="creationCompleteHandler(event)">
	<fx:Script>
		<![CDATA[
			import Controller.AGORAController;
			import Controller.UpdateController;
			import Controller.UserSessionController;
			
			import Model.AGORAMapModel;
			import Model.AGORAModel;
			import Model.CategoryModel;
			import Model.UserSessionModel;
			
			import ValueObjects.CategoryDataV0;
			
			import classes.Language;
			
			import flash.system.Capabilities;
			
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			
			public var timer:Timer = new Timer(10000);
			public var numClicks:int=0;
			[Bindable] private var buttonWidth:uint = 200;
			[Bindable] private var buttonHeight:uint = 80;
			
			
			/**
			 * Once the object has been fully created, this method is called
			 * 
			 * Starts the timer and adds the function timerFired to it
			 * Fetches the categories and two lists upon completion
			 */
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				timer.addEventListener(TimerEvent.TIMER, timerFired);
				timer.start();
				AGORAController.getInstance().fetchDataCategory();
				AGORAController.getInstance().fetchDataMapList();
				AGORAController.getInstance().fetchDataProjectList();
			}
			
			/**
			 * Gets called every time the timer is fired. 
			 * 
			 * Calls the AGORAController's method, onTimer. See that method's documentation 
			 * for more info
			 */
			protected function timerFired(event:TimerEvent):void{
				AGORAController.getInstance().onTimer();
			}
			
			/**
			 * Handles what happens when the Create New Map button is clicked.
			 * 
			 * If the user is a guest, prevent the user from accessing this button. Otherwise,
			 * display a map info box. See display AGORAController.displayMapInfoBox for more details
			 */
			protected function createMapBtn_clickHandler(event:MouseEvent):void
			{
				
				var userSession:UserSessionModel = AGORAModel.getInstance().userSessionModel;
				if(userSession.username == "Guest"){
					Alert.show("You must log in with a non guest account before creating a map");
				} else {
					AGORAController.getInstance().displayMapInfoBox();
				}
			}
			
			/**
			 * Handles what happens when the user clicks the sign in button when the AGORAMenu is present.
			 * 
			 * If the user is logged in, just log them out. If the user is not logged in, display the
			 * box that allows the user to log in. See UserSessionController's documentation for more
			 * detail.
			 */
			protected function signInBtn_clickHandler(event:MouseEvent):void
			{
				UserSessionController.getInstance().signInSignOut();
			}
			
			/**
			 * Handles what happens when the user clicks the register button when the AGORAMenu is present.
			 * 
			 * Displays the box that allows the user to register for agora. See
			 * UserSessionController.showRegistrationBox for more info
			 */
			protected function registerBtn_clickHandler(event:MouseEvent):void
			{
				UserSessionController.getInstance().showRegistrationBox();
			}
			
			/**
			 * Handles what happens when the Create Password Protected Project button is clicked or
			 * the Create a map within this project button is clicked.
			 * 
			 * First, gets the instance of the UserSessionController. Then it blocks guests from
			 * doing anything. Once guests are blocked, check to see if we check which button was
			 * clicked. Two things are possible:
			 *		1. Button was Create password protected project button
			 * 				Displays the project info box. See AGORAController.displayProjectInfoBox
			 * 				for more info on this.
			 * 		2. Button was Create a map within this project button
			 * 				Sets a boolean to tell other threads that we are moving a project and
			 * 				then displays a map info box 		
			 */
			protected function projectsButton_OnClick(event:MouseEvent):void{

				
				var userSession:UserSessionModel = AGORAModel.getInstance().userSessionModel;
				if(userSession.username == "Guest"){
					Alert.show("You must log in with a non guest account before creating a map");
				} else {
					if(createProjectBtn.label == "Create a map within this project"){
						AGORAModel.getInstance().moveToProject = true;
						AGORAController.getInstance().displayMapInfoBox();
						
					} else {
						AGORAController.getInstance().displayProjectInfoBox();
					}
				}
			}
			
			/**
			 * Handles what happens when the uesr presses the back button inside of projects
			 * 
			 * Calls the correct invalidateDisplayLists of each of the two project zones. This
			 * repopulates the lists with the top level projects.
			 */ 
			protected function backToMajorProjectList(event:MouseEvent):void {
				AGORAModel.getInstance().agoraMapModel.projectID = 0;
				AGORAModel.getInstance().agoraMapModel.projID = 0;
				projects.invalidateDisplayList();
				myProjects.invalidateDisplayList();
			}
			
			/**
			 * Handles what happens when the back button is click within AGORAMenu
			 * 
			 * This back button handles category transitions. It moves back and forth
			 * between each of the categories and their parent. The way this is done
			 * is to make an arraylist and store the current category and the current
			 * category's parent into a category value object. This is nothing more
			 * than transforming the arraylist into a linkedlist with a prev and next
			 * pointer. It is used this way to retain indexing speeds while maintaining
			 * the integrity of the category value object. 
			 * 
			 * Basically, this just makes a DB call that retrieves the parent category's
			 * list and populates the category pane with it.
			 */
			protected function backButton_OnClick():void{
				var cg:ArrayList = AGORAController.getInstance().categoryChain;
				var temp:String = (CategoryDataV0)(cg.getItemAt(cg.length-1)).parent;
				cg.removeItemAt(cg.length-1);
				if(!temp){
					this.tabNav.setVisible(true,true);
					this.mainPanel.visible=false;
					AGORAController.getInstance().fetchDataCategory();
					AGORAController.getInstance().fetchDataChildMap(temp);
				} else {
					AGORAController.getInstance().fetchDataChildCategory(temp);
					AGORAController.getInstance().fetchDataChildMap(temp);
				}
				
			}
			
			/**
			 * REMOVE THIS FUNCTION WHEN TESTING IS DONE
			 * 
			 * This was used to view all maps and all projects. It is being ONLY so that
			 * testing can continue. It allows us to see the lists of all maps and all
			 * projects
			 */
			protected function hackButton_OnClick():void{
				if(!this.mainPanel.visible){
					this.tabNav.setVisible(false,true);
					this.mainPanel.visible=true;
				} else {
					this.tabNav.setVisible(true,true);
					this.mainPanel.visible=false;		
				}
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<mx:TabNavigator id="tabNav" top="100" width="800" height="400" borderVisible="true"
					 cornerRadius="0" creationPolicy="all" horizontalCenter="0" name="tabNav"
					 tabWidth="267" textAlign="center">
		<s:NavigatorContent width="100%" height="100%" label="{Language.lookup(&quot;Search&quot;)}">
			<mx:Image id="loader1" horizontalCenter="0"
					   verticalCenter="-1"/>
					<s:Group horizontalCenter="-3" verticalCenter="-25">
						<components:CategoryPanel id="categories" width="482" height="309"
												  horizontalCenter="0"
												  skinClass="spark.skins.spark.SkinnableContainerSkin"
												  title="category" verticalCenter="0">	
						</components:CategoryPanel>
					</s:Group>
		</s:NavigatorContent>
		
		<!--The my maps page. Loads the user's maps from the DB and populates the canvas-->
		
		<s:NavigatorContent id="myMapsTab" width="100%" height="100%" label="{Language.lookup(&quot;MyMaps&quot;)}">
			<s:HGroup id="myMapsHorizGroup" y="10" horizontalCenter="0">
				<components:MyMapsPanel id="myMaps" width="796" height="357"
										dropShadowVisible="false" horizontalCenter="-2">
				</components:MyMapsPanel>
			</s:HGroup>
		</s:NavigatorContent>
		
		<!--The my projects tab. Loads the users projects from the DB and populates the canvas-->
		
		<s:NavigatorContent id="projectsTab" width="100%" height="100%" label="{Language.lookup('MyPPProjects')}">
			<components:Projects id="myProjects" y="-34" width="100%" height="341" borderAlpha="0.0"
								 borderVisible="false" controlBarVisible="false"
								 dropShadowVisible="false">
			</components:Projects> 
			<s:Button id="createProjectBtn" label="{Language.lookup(&quot;NewProject&quot;)}"
					  click="projectsButton_OnClick(event)" horizontalCenter="-90"
					  verticalCenter="163">
			</s:Button>
			<s:Button id="backToProjectList" label="{Language.lookup(&quot;Back&quot;)}"
					  click="backToMajorProjectList(event)" horizontalCenter="90"
					  verticalCenter="163">
			</s:Button>
		</s:NavigatorContent>
	</mx:TabNavigator>		
	<s:HGroup id="mainPanel2" visible="false" height="436" paddingBottom="25" paddingLeft="25"
			  paddingRight="25" paddingTop="25">
		<components:MapListPanel 
			id="mapList" 
			title="{Language.lookup(&quot;ListMaps&quot;)}" 
			width="200" height="400"
			>		
		</components:MapListPanel>
		
		
	</s:HGroup>
	<s:VGroup id="Agora" top="17" width="800" horizontalAlign="center" horizontalCenter="0">
		<s:Label id="Greeting" x="295" width="211" height="54"
				 text="{Language.lookup('WelcomeShort')} 2.3" verticalAlign="bottom">
		</s:Label>
		<s:HGroup id="mainPanel" visible="false" height="436" paddingBottom="25" paddingLeft="25"
				  paddingRight="25" paddingTop="25">
			<components:ProjectListPanel id="projects" 
										 title="{Language.lookup(&quot;ProjectPP&quot;)}" 
										 width="200" height="400">	
			</components:ProjectListPanel>

		</s:HGroup>
		
		
		<!--Horizontal row of buttons at the bottom of the screen-->
		<s:HGroup id="bottomButtonRow" height="36" paddingLeft="0" paddingTop="25" textAlign="center"
				  verticalAlign="middle">
			
			<s:Button id="signInBtn"
					  label="{AGORAModel.getInstance().userSessionModel.uid? 
					  Language.lookup('SignOut'): Language.lookup('SignIn')}"
					  click="signInBtn_clickHandler(event)" />
			
			<s:Button id="registerBtn"
					  label="{Language.lookup(&quot;RegisterAsNew&quot;)}"
					  enabled ="{AGORAModel.getInstance().userSessionModel.uid? false: true}"
					  click="registerBtn_clickHandler(event)" />
			<s:Button id="backBtn"
					  label="{Language.lookup('Back')}"
					  click="backButton_OnClick()"/>
			<!--<s:Button id="hackBtn"
					  label="{Language.lookup('Back')}"
					  click="hackButton_OnClick()"/>-->
			
		</s:HGroup>
	</s:VGroup>	
	<!--Adds the chat window to the menu-->
	<components:ChatWindow id="chat" top="100" width="200" height="396" horizontalCenter="-556"
						   name="chat">
	</components:ChatWindow>
</s:Group>
