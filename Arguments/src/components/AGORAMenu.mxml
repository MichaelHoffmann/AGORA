<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:components="components.*" 
		 creationComplete="creationCompleteHandler(event)"
		 horizontalCenter="0" verticalCenter="0"
		 >
	<fx:Script>
		<![CDATA[
			import Controller.AGORAController;
			import Controller.UpdateController;
			import Controller.UserSessionController;
			
			import Model.AGORAMapModel;
			import Model.AGORAModel;
			import Model.CategoryModel;
			import Model.CreateMapInCurrentCategoryModel;
			import Model.UserSessionModel;
			
			import Skins.ScrollerSkin;
			
			import ValueObjects.CategoryDataV0;
			
			import classes.Language;
			
			import flash.system.Capabilities;
			
			import flashx.textLayout.conversion.TextConverter;
			
			import mx.collections.ArrayList;
			import mx.containers.Box;
			import mx.controls.Alert;
			import mx.controls.Text;
			import mx.controls.TextArea;
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			import mx.core.UITextField;
			import mx.core.mx_internal;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ResizeEvent;
			import mx.managers.PopUpManager;
			
			import spark.components.Panel;
			import spark.components.Scroller;
			import spark.components.TitleWindow;
			
			public var timer:Timer = new Timer(10000);
			public var numClicks:int=0;
			public var selectedTab;
			[Bindable] private var buttonWidth:uint = 200;
			[Bindable] private var buttonHeight:uint = 80;
			
			
			/**
			 * Once the object has been fully created, this method is called
			 * 
			 * Starts the timer and adds the function timerFired to it
			 * Fetches the categories and two lists upon completion
			 */
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				tabNav.addEventListener(IndexChangedEvent.CHANGE, checkForMyMapsTab);
				//timer.addEventListener(TimerEvent.TIMER, timerFired);
				//timer.start();
				AGORAController.getInstance().fetchDataCategory();
				AGORAController.getInstance().fetchDataMapList();
				AGORAController.getInstance().fetchDataProjectList();
				getRegistrationNote();
			}
			
			
			/**
			 * Gets called every time the timer is fired. 
			 * 
			 * Calls the AGORAController's method, onTimer. See that method's documentation 
			 * for more info
			 */
			protected function timerFired(event:TimerEvent):void{
				AGORAController.getInstance().onTimer();
			}
			
			/**
			 * Handles what happens when the Create New Map button is clicked.
			 * 
			 * If the user is a guest, prevent the user from accessing this button. Otherwise,
			 * display a map info box. See display AGORAController.displayMapInfoBox for more details
			 */
			protected function createMapBtn_clickHandler(event:MouseEvent):void
			{
				
				var userSession:UserSessionModel = AGORAModel.getInstance().userSessionModel;
				if(userSession.username == "Guest"){
					Alert.show(Language.lookup('GuestCreateMapError'));
				} else {
					AGORAController.getInstance().displayMapInfoBox();

				}
			}
			
			/**
			 * Handles what happens when the user clicks the sign in button when the AGORAMenu is present.
			 * 
			 * If the user is logged in, just log them out. If the user is not logged in, display the
			 * box that allows the user to log in. See UserSessionController's documentation for more
			 * detail.
			 */
			protected function signInBtn_clickHandler(event:MouseEvent):void
			{
				UserSessionController.getInstance().signInSignOut();
			}
			/**
			 * Handles what happens when the user clicks the refresh button when the AGORAMenu is present.
			 * 
			 * Simply calls a refresh for each tab of the project
			 */
			protected function updateProject(event:MouseEvent):void
			{
				Controller.AGORAController.getInstance().updateProjectOnce(event);
				
			}	
			protected function updateMyMaps(event:MouseEvent):void
			{
				Controller.AGORAController.getInstance().updateMyMaps(event);
			}			
			protected function updateMyContributions(event:MouseEvent):void
			{
				Controller.AGORAController.getInstance().updateMyContributions(event);
			}			
			protected function updateWOA(event:MouseEvent):void
			{
				Controller.AGORAController.getInstance().updateWOA(event);
				
			}			

			/**
			 * Handles what happens when the user clicks the register button when the AGORAMenu is present.
			 * 
			 * Displays the box that allows the user to register for agora. See
			 * UserSessionController.showRegistrationBox for more info
			 */
			protected function registerBtn_clickHandler(event:MouseEvent):void
			{
				UserSessionController.getInstance().showRegistrationBox();
			}
			
			/**
			 * Handles what happens when the Create Password Protected Project button is clicked or
			 * the Create a map within this project button is clicked.
			 * 
			 * First, gets the instance of the UserSessionController. Then it blocks guests from
			 * doing anything. Once guests are blocked, check to see if we check which button was
			 * clicked. Two things are possible:
			 *		1. Button was Create password protected project button
			 * 				Displays the project info box. See AGORAController.displayProjectInfoBox
			 * 				for more info on this.
			 * 		2. Button was Create a map within this project button
			 * 				Sets a boolean to tell other threads that we are moving a project and
			 * 				then displays a map info box 		
			 */
			protected function projectsButton_OnClick(event:MouseEvent):void{
 				
				var usm:*=Model.AGORAModel.getInstance().userSessionModel;
				if (usm.username != "Guest") 
				{
				//	Controller.AGORAController.getInstance().displayProjectInfoBox("newInWoA");
				}
				else 
				{
					mx.controls.Alert.show(classes.Language.lookup("GuestCreateMapError"));
				}
				
			}
			
			/**
			 * Handles what happens when the uesr presses the back button inside of projects
			 * 
			 * Calls the correct invalidateDisplayLists of each of the two project zones. This
			 * repopulates the lists with the top level projects.
			 */ 


			public  function setTab(current:String){
				var cg:CategoryChain = FlexGlobals.topLevelApplication.rightSidePanel.categoryChain;
				var usm:UserSessionModel=AGORAModel.getInstance().userSessionModel;
				usm.selectedTab = current;
				var tempEvent:MouseEvent=new MouseEvent("click");
				if(current == Language.lookup("MyContributions"))
				{
					cg.topButton();
					usm.selectedMyContProjID=null;
					updateMyContributions(tempEvent);
				}
				else if(current==Language.lookup("MyPPProjects"))
				{
					cg.topButton();
					myProjects.currentState="listOfProjects";
					usm.selectedMyProjProjID=null;
					 updateProject(tempEvent); 
					 
					//	AGORAModel.getInstance().projectListModel.requestProjectList();										

				}else if (current ==Language.lookup("MainTab"))
				{	cg.topButton();

					updateWOA(tempEvent);
				}else if(current==Language.lookup("MyMaps"))
				{
					cg.topButton();
				}

			}


			/**
			 * Handles what happens when the back button is click within AGORAMenu
			 * 
			 * This back button handles category transitions. It moves back and forth
			 * between each of the categories and their parent. The way this is done
			 * is to make an arraylist and store the current category and the current
			 * category's parent into a category value object. This is nothing more
			 * than transforming the arraylist into a linkedlist with a prev and next
			 * pointer. It is used this way to retain indexing speeds while maintaining
			 * the integrity of the category value object. 
			 * 
			 * Basically, this just makes a DB call that retrieves the parent category's
			 * list and populates the category pane with it.
			 */
			protected function backButton_OnClick(event:MouseEvent):void{
				var cg:CategoryChain = FlexGlobals.topLevelApplication.rightSidePanel.categoryChain;

				//var contricg:ArrayList = AGORAController.getInstance().contributionsCategoryChain;
				
				var temp1:Number= AGORAModel.getInstance().agoraMapModel.projectID;
				var selectT:String = AGORAModel.getInstance().userSessionModel.selectedTab;
				if (selectT == Language.lookup("MainTab")){
					var backup:Array=cg.back();
					//if (backup[1]>-1){
					if(backup[2]==null || backup[2]=="0"){
					if(backup[1]>-1){
						var usm:UserSessionModel= AGORAModel.getInstance().userSessionModel;						
						usm.selectedWoAProjID=backup[1];
						Controller.AGORAController.getInstance().fetchDataChildCategory(backup[0],backup[1],1);
					}else{
						AGORAController.getInstance().fetchDataCategory();
						cg.topButton();
					}
					}
				}else if (selectT== Language.lookup("MyPPProjects")){
					myProjects.currentState=("listOfProjects");
					Controller.AGORAController.getInstance().fetchDataMyProjects();
					//cg.visible=false;
				}
				else if (selectT == Language.lookup("MyContributions")){
					//myContributions.currentState=("listOfContributions");
					cg.visible=false;
					updateMyContributions(event);
				}
				else if (selectT == Language.lookup("MyMaps")){
					cg.visible=true;
					updateMyMaps(event);
				}
				
			}
			
			/**
			 * REMOVE THIS FUNCTION WHEN TESTING IS DONE
			 * 
			 * This was used to view all maps and all projects. It is being ONLY so that
			 * testing can continue. It allows us to see the lists of all maps and all
			 * projects
			 */
			protected function hackButton_OnClick():void{
				if(!this.mainPanel.visible){
					this.tabNav.setVisible(false,true);
					this.mainPanel.visible=true;
				} else {
					this.tabNav.setVisible(true,true);
					this.mainPanel.visible=false;		
				}
			}
			
			protected function privacyPolicyBtn_clickHandler(event:MouseEvent):void
			{
				var registrationNote:RegistrationNote = new RegistrationNote;
				PopUpManager.addPopUp(registrationNote, this.parent,false);
				PopUpManager.centerPopUp(registrationNote);				
			}
			
			protected function aboutUsBtn_clickHandler(event:MouseEvent):void
			{
				navigateToURL(new URLRequest('http://agora.gatech.edu/?page_id=6'), 'quote');
				
			}
			
			protected function faqBtn_clickHandler(event:MouseEvent):void
			{
				navigateToURL(new URLRequest('http://agora.gatech.edu/?page_id=250'), 'quote');
				
			}
			
			protected function contactUsBtn_clickHandler(event:MouseEvent):void
			{
				navigateToURL(new URLRequest('http://agora.gatech.edu/?page_id=24'), 'quote');
				
			}
			
			protected function helpBtn_clickHandler(event:MouseEvent):void
			{
				navigateToURL(new URLRequest('http://agora.gatech.edu/?page_id=240'), 'quote');
				
			}
			
			
			protected function checkForMyMapsTab(event:IndexChangedEvent):void
			{
				if(event.newIndex == 1 || event.oldIndex == 1)
					FlexGlobals.topLevelApplication.rightSidePanel.flipCategoryChainVisibility();
				
			}
			
			protected function group1_addedToStageHandler(event:Event):void
			{
				hidePanelButton.x = stage.stageWidth - hidePanelButton.getExplicitOrMeasuredWidth();
				hidePanelButton.y = 0;
			}
			protected function getRegistrationNote():void{
				var userSession:UserSessionModel = AGORAModel.getInstance().userSessionModel;
				if( userSession.username=='Guest'){
					privacyPolicyBtn.toolTip= Language.lookup('RegistrationNote');
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	
	<s:HGroup id="mainPanel2" visible="false" height="436" paddingBottom="25" paddingLeft="25"
			  paddingRight="25" paddingTop="25">
		<components:MapListPanel 
			id="mapList" 
			title="{Language.lookup(&quot;ListMaps&quot;)}" 
			width="200" height="400"
			>		
		</components:MapListPanel>	
	</s:HGroup>

	<s:VGroup id="Agora" top="17" width="800" horizontalAlign="center" horizontalCenter="0">
		<s:Label id="Greeting" width="211" height="54"
				 text="{Language.lookup('WelcomeShort')} {Language.lookup('AgoraVersion')}" verticalAlign="bottom">
		</s:Label>
		<s:HGroup id="mainPanel" visible="false" height="436" paddingBottom="25" paddingLeft="25"
				  paddingRight="25" paddingTop="25">
			<components:MapListPanel>
				</components:MapListPanel>
			<components:ProjectListPanel id="projects" 
										 title="{Language.lookup(&quot;ProjectPP&quot;)}" 
										 width="200" height="400">	
			</components:ProjectListPanel>

		</s:HGroup>
	</s:VGroup>
	
	<s:VGroup id="navigtorGroup"  width="800" height="600" horizontalAlign="center" horizontalCenter="0" verticalAlign="middle" verticalCenter="0">
		<mx:TabNavigator id="tabNav" percentWidth="100" percentHeight="90" borderVisible="true" cornerRadius="0" change ="{setTab(tabNav.selectedChild.label)}" 
						 creationPolicy="all" horizontalAlign="left" name="tabNav" tabWidth="{navigtorGroup.width*.20}" textAlign="center" 
						 >
			<s:NavigatorContent percentWidth="100" percentHeight="100" label="{Language.lookup('MainTab')}" verticalCenter="0" horizontalCenter="0">
						<s:VGroup percentWidth="100" percentHeight="100" horizontalCenter="0" verticalCenter="0" horizontalAlign="center">
							
							<components:CategoryPanel id="categories" percentWidth="100" percentHeight="100"
													  horizontalCenter="0"
													  skinClass="spark.skins.spark.SkinnableContainerSkin"
													  title="category" verticalCenter="0">	
							</components:CategoryPanel>
							<!--Button to create a new map-->
							<s:Label id="clickthroughCategories" visible="false" 
									  text="{Language.lookup('CreateProjectElsewhere')}"/>
						</s:VGroup>
			</s:NavigatorContent>
			
			<!--The my maps page. Loads the user's maps from the DB and populates the canvas-->
			
			<s:NavigatorContent id="myMapsTab" percentWidth="100" percentHeight="100" label="{Language.lookup(&quot;MyMaps&quot;)}" >
				<s:VGroup percentWidth="100" percentHeight="95" horizontalCenter="0">
					<s:HGroup id="myMapsHorizGroup" percentWidth="100" percentHeight="100">
						<components:MyMapPanel id="myMaps" percentWidth="100" percentHeight="100">
						</components:MyMapPanel>
					</s:HGroup>
					
					<s:HGroup  percentHeight='5' bottom="5" horizontalCenter="0" horizontalAlign="center" percentWidth="100">
						<s:Button label="{Language.lookup('Delete')}" id="deleteButton" click="this.myMaps.deleteMaps(event)"
								  toolTip="{Language.lookup('HowToDeleteMaps')}"/>
						<s:Button id="createMapBtnMyMaps"  bottom="10"
								  label="{Language.lookup('NewMap')}" click="createMapBtn_clickHandler(event)"
								  toolTip="{Language.lookup('NewMapToolTip')}">
						</s:Button >
						<s:Button id="refreshMaps" bottom="10"
								  label="{Language.lookup('Refresh')}" click="updateMyMaps(event)">
						</s:Button >
					</s:HGroup>

				</s:VGroup>
			</s:NavigatorContent>
			
			<!--The my projects tab. Loads the users projects from the DB and populates the canvas-->
			
			<s:NavigatorContent id="projectsTab" percentWidth="100" percentHeight="100" label="{Language.lookup('MyPPProjects')}">
				<s:VGroup percentWidth="100" percentHeight="100">
					<components:MyProjectsPane id="myProjects" percentWidth="100" percentHeight="95">
					</components:MyProjectsPane> 
					<s:Label text="{Language.lookup('CreateProjectElsewhere')}" horizontalCenter="0" bottom="40" percentWidth="100" />

				</s:VGroup>
			</s:NavigatorContent>
			<s:NavigatorContent percentWidth="100" percentHeight="100" label="{Language.lookup('MyContributions')}" >
				<s:VGroup percentWidth="100" percentHeight="100" horizontalCenter="0" verticalCenter="0" horizontalAlign="center">
					<components:MyContributionsPanel id="contributions" percentWidth="100" percentHeight="100"
											  horizontalCenter="0"
											  skinClass="spark.skins.spark.SkinnableContainerSkin"
											  title="category" verticalCenter="0">	
					</components:MyContributionsPanel>
					
					<!--Button to create a new map-->
					
					<s:Label text="{Language.lookup('CreateProjectElsewhere')}" horizontalCenter="0" bottom="20"/>

				</s:VGroup>
			</s:NavigatorContent>
			<s:NavigatorContent percentWidth="100" percentHeight="100" label="{Language.lookup('Search')}">
				<s:Label id="ComingSoon" text="{Language.lookup('ComingSoon')}"/>
			</s:NavigatorContent>
		</mx:TabNavigator>
		<!--Horizontal row of buttons at the bottom of the screen-->
		<s:VGroup verticalAlign="middle" horizontalAlign="center" percentWidth="100" percentHeight="10">
			<s:HGroup id="bottomButtonRow" percentWidth="100" percentHeight="100" textAlign="center" horizontalAlign="center">
			
				<s:Button id="signInBtn"
						  label="{Language.lookup(UserSessionController.getInstance().getSignInBtnText(AGORAModel.getInstance().userSessionModel._uid)) }"
						  click="signInBtn_clickHandler(event)" />
				
				<s:Button id="registerBtn"
						  label="{Language.lookup(UserSessionController.getInstance().getRegisterBtnText(AGORAModel.getInstance().userSessionModel._uid)) }"
						  click="registerBtn_clickHandler(event)" />
				<s:Button id="privacyPolicyBtn"
						  label="{Language.lookup('PrivacyPolicy')}"
						  click="privacyPolicyBtn_clickHandler(event)"/>
				<s:Button id="backBtn"
						  label="{Language.lookup('Back')}"
						  click="backButton_OnClick(event)"/>

				<!--s:Button id="hackBtn"
				label="{Language.lookup('Back')}"
				click="hackButton_OnClick()"/-->
			</s:HGroup>
			<s:HGroup percentWidth="100" percentHeight="100" verticalAlign="middle" horizontalAlign="center">
				<s:Button id="aboutUsBtn"
						  label="{Language.lookup('AboutUs')}"
						  click="aboutUsBtn_clickHandler(event)" />
				
				<s:Button id="faqBtn"
						  label="{Language.lookup('FAQ')}"
						  click="faqBtn_clickHandler(event)" />
				<s:Button id="contactUsBtn"
						  label="{Language.lookup('ContactUS')}"
						  click="contactUsBtn_clickHandler(event)"/>
				<s:Button id="helpBtn"
						  label="{Language.lookup('Help')}"
						  click="helpBtn_clickHandler(event)"/>
			</s:HGroup>
		</s:VGroup>
	</s:VGroup>
	<s:Button id="hidePanelButton" label="{Language.lookup('UnhidePanel')}" 
			  click="
			  {
			  	FlexGlobals.topLevelApplication.rightSidePanel.visible = true; 
			  	FlexGlobals.topLevelApplication.map.agora.width = stage.stageWidth -40- FlexGlobals.topLevelApplication.rightSidePanel.width;
			  }" 
			  height="30" top="0" right="0"/>


</s:Group>
