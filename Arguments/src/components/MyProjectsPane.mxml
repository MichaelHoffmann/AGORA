<?xml version="1.0" encoding="UTF-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  currentState="listOfProjects" initialize="{init()}" percentWidth="100" horizontalAlign="center">
    <fx:Declarations>
        <fx:XML id="projXML">
        </fx:XML>
		<fx:XMLList id="usersXML">
		</fx:XMLList>
		<fx:XMLList id="mapXML">
		</fx:XMLList>
        <s:RadioButtonGroup id="usersList"/>
    </fx:Declarations>
	
	<s:states>
		<s:State name ="listOfProjects"/>
		<s:State name="projectsInfo"/>
	</s:states>

		<s:VGroup percentWidth="100" horizontalAlign="center" height="10">
                <mx:Text id="loadingDisplay" /> 
                <mx:Text id="signIn" />
        </s:VGroup>
	 
        <s:HGroup percentWidth="95" horizontalCenter="0" verticalAlign="middle" horizontalAlign="center" top="0"  minHeight="350" includeIn="listOfProjects">
			<s:Scroller percentWidth="100" height ="400" >
						<s:VGroup gap="5" top ="0" visible="false" id="projectList" percentWidth="100"/>
			</s:Scroller>
		</s:HGroup>

		<s:HGroup percentWidth="100"  minHeight="350" horizontalAlign="center" includeIn="projectsInfo" accentColor="20" horizontalCenter="0">
                <s:VGroup percentWidth="100" gap ="10" horizontalAlign="left">
					<s:HGroup percentWidth="100" horizontalAlign="left">
						<s:Label text="" id="projectName"  fontSize="32" paddingLeft="32" width="75%"  left = "0" textAlign="left"/>
						<s:Button id = "delProj" label="delete" click="deleteHandler()"/>
						<s:Button id="renameProj" label="rename" click="AGORAController.getInstance().displayProjectInfoBox('rename')"/>
					</s:HGroup>
                    <s:HGroup  paddingLeft="32" percentWidth="90" gap ="20" height = "20" horizontalAlign="center">
                            <s:VGroup percentWidth="30">
								<s:Label text= "Projects within this project" />
								<s:Scroller percentWidth="100" height="300" >
									<s:VGroup  gap="5" visible="true" id="subprojectList" percentWidth="100"/>
								</s:Scroller>

							</s:VGroup>
							<s:VGroup percentWidth="15">
                            	<s:Label text="Project Type" />	
								<s:ToggleButton label="Adversarial" enabled="false" percentWidth="100"/>
							</s:VGroup>
							<s:VGroup percentWidth="30">
								<s:Label text= "Maps in this Project" />
								<s:Scroller percentWidth="100">
									<s:VGroup  height="260" id="mapPanel" percentWidth="100">
										
									</s:VGroup>
								</s:Scroller>
							</s:VGroup>
							<s:VGroup percentWidth="30" id="memberGroup">
								<s:Label text= "Users" />
								<s:Scroller percentWidth="100">
									<s:VGroup id="memberList" percentWidth="100">
										<s:VGroup height="150" percentWidth="100"  id="projectMemberPanel">

										</s:VGroup>
										<s:Button percentWidth="100" click="
												  {
												  this.addMembers();
												  }
												  
												  " id="_MyProjectsPane_Button3" label='{classes.Language.lookup("AddProjectMembers")}' />
										<s:Button percentWidth="100" click="
												  {
												  this.removeMembers();
												  return;
												  }
												  
												  " id="_MyProjectsPane_Button4" label='{classes.Language.lookup("RemoveMembers")}' />
										<s:Button enabled ="false" percentWidth="100" click=' selectAdminHandler()' id="SelectAdmin" label='{classes.Language.lookup("SelectAdmin")}' />

									</s:VGroup>
								</s:Scroller>
							</s:VGroup>
						</s:HGroup>
                </s:VGroup>
        </s:HGroup>
        <s:HGroup horizontalAlign="center" percentWidth="100">
                    <s:Label text="If you want to create a new project elsewhere, determine its location in the 'World of Arguments'" />
			<s:Button label="refresh" click = "Controller.AGORAController.getInstance().updateProject(event)"
>
				
			</s:Button>
        </s:HGroup>
    <fx:Script>
        <![CDATA[
			import Controller.*;
			
			import Events.*;
			
			import Model.*;
			
			import Skins.LeftAlignTextButtonSkin;
			
			import ValueObjects.*;
			
			import __AS3__.vec.*;
			
			import classes.*;
			
			import flash.accessibility.*;
			import flash.debugger.*;
			import flash.display.*;
			import flash.errors.*;
			import flash.events.*;
			import flash.external.*;
			import flash.geom.*;
			import flash.media.*;
			import flash.net.*;
			import flash.printing.*;
			import flash.profiler.*;
			import flash.system.*;
			import flash.text.*;
			import flash.ui.*;
			import flash.utils.*;
			import flash.xml.*;
			
			import mx.controls.Alert;
			import mx.core.*;
			import mx.events.*;
			import mx.filters.*;
			import mx.managers.PopUpManager;
			import mx.rpc.events.*;
			import mx.rpc.http.*;
			import mx.styles.*;
			
			import spark.components.RadioButton;
			[Bindable]
			public var inited:Boolean;
			
			public var model:Model.ProjectsModel;
			
			public var projMapModel:Model.LoadProjectMapsModel;
			
			public var mapListXML:XML;
			
			public var mapMetaDataVector:__AS3__.vec.Vector.<Model.MapMetaData>;
			
			internal var back:spark.components.Button;
		
        public function init():void
        {
            this.projMapModel = Model.AGORAModel.getInstance().loadProjMaps;
            this.model = Model.AGORAModel.getInstance().myProjectsModel;
            this.loadingDisplay.text = classes.Language.lookup("Loading");
            this.signIn.horizontalCenter = 0;
            this.signIn.setStyle("textDecoration", "underline");
            this.signIn.text = classes.Language.lookup("SignInToViewProj");
            this.signIn.addEventListener(flash.events.MouseEvent.CLICK, this.showSignInBox);
            this.populateProjects();
            return;
        }

        public function removeMembers():void
        {
            var usersDetail:Array=new Array();
			usersDetail.push(usersList.selectedValue);
            Model.AGORAModel.getInstance().agoraMapModel.projectUsers = usersDetail;
			Controller.AGORAController.getInstance().removeMembers();
        }

        public function addMembers():void
        {
            Controller.AGORAController.getInstance().displayProjectInfoBox("addUsers");
        }
			public function setCurrentProject(projID:String):void
			{
				this.loadingDisplay.visible=true;
				var usm:UserSessionModel=AGORAModel.getInstance().userSessionModel;
				model.requestProjDetails(projID);
				model.requestChildCategories(projID);
				model.listProjMaps(projID);
				usm.selectedMyProjProjID = projID;
				SelectAdmin.enabled="false";
		}
		public function updateProject(){
			var usm:UserSessionModel=AGORAModel.getInstance().userSessionModel;
			setCurrentProject(usm.selectedMyProjProjID);
			populateUser();
		}
		public function populateSubProjects(){
			loadingDisplay.visible=false;

			subprojectList.removeAllElements();
			var subprojects:XMLList=this.model.subProjectList.child;
			for each(var categoryXML:XML in subprojects){
				trace("Adding buttons");
				var button:Button = new Button;
				
				button.setStyle("skinClass",TextWrapSkin);
				button.width = 150
				button.name = categoryXML.@projID; //The ID (unique DB identifier) of the category
				button.label = categoryXML.@name ; //The title of the category (e.g. Philosophy, Biology, or Projects)
				button.setStyle("chromeColor", 0xA0CADB);
				subprojectList.addElement(button);
				button.addEventListener('click',function(e:Event):void{
					trace("button \"" + e.target.label + "\" clicked");
					e.stopImmediatePropagation();	
					//Checks to see if the current category is a project
					setCurrentProject(e.target.name);
					projectName.text=e.target.label;
				}, false, 1,false);
			}

			
		}
		protected function deleteHandler():void{
			var usm:UserSessionModel=AGORAModel.getInstance().userSessionModel;
			AGORAController.getInstance().deleteProject(usm.selectedMyProjProjID);
			

		}
			private function alertListener(eventObj:CloseEvent):void {
				// Check to see if the OK button was pressed.
				if (eventObj.detail==Alert.OK) {
					AGORAController.getInstance().selectAsAdmin(usersList.selectedValue.toString());
				}
			}
		protected function selectAdminHandler():void{
			if(usersList.selectedValue){
				Alert.show("If you select a new admin, you will no longer be the admin for this project" ,"Are you sure?", Alert.OK | Alert.CANCEL, null, alertListener, null, Alert.CANCEL);

			}else{
				mx.controls.Alert.show("You must select a user to make the  administrator of this project");
			}
			

		}
        protected function onFault(fault:FaultEvent):void
        {
            removeEventListener(mx.rpc.events.FaultEvent.FAULT, this.onFault);
            dispatchEvent(new Events.AGORAEvent(Events.AGORAEvent.FAULT));
        }


		public function populateProjects():void{
			loadingDisplay.visible=false;

			var usm:Model.UserSessionModel;
			var xml:XML;
			var buttonG:spark.components.HGroup;
			var button:Button;
			var pbutton:Button;
			var isHostile:spark.components.ToggleButton;
			var baseID;
			var loc1:*;
			buttonG = null;
			button = null;
			isHostile = null;
			usm = Model.AGORAModel.getInstance().userSessionModel;
			if (usm.loggedIn()) 
			{
				this.signIn.visible = false;
				this.projectList.visible = true;
				projectList.removeAllElements();

				if (this.model.projectList) 
				{
					trace("loadingProjects")
					var loc2:*=0;
					var loc3:*=this.model.projectList.ProjectList.proj;

					for each (xml in loc3) 
					{
						var isIn:Label = new Label();
						isIn.text= "\n"+Language.lookup('IsIn');
						buttonG = new spark.components.HGroup();
						buttonG.verticalAlign="middle";

						buttonG.percentWidth = 100;
						buttonG.height =32;
						button = new Button();
						isHostile = new spark.components.ToggleButton();
						button.name = xml.@ID;
						button.percentWidth=60;
						button.label = xml.@title;
						pbutton = new Button();
						pbutton.percentWidth=30;
						isIn.percentWidth=10;
						pbutton.label= xml.@parent_name;
						pbutton.id= xml.@ID;
						pbutton.setStyle("chromeColor", 0xA0CADB);
						pbutton.setStyle("skinClass",LeftAlignTextButtonSkin);
						pbutton.addEventListener(MouseEvent.CLICK, function(e:MouseEvent):void{
							if(!FlexGlobals.topLevelApplication.moveProject){
								FlexGlobals.topLevelApplication.moveProject = new MoveProjectPopUpPanel();
							}
							trace("moving a project"+parseInt(((Button)(e.target).id)));
							FlexGlobals.topLevelApplication.moveProject.projectID = parseInt(((Button)(e.target).id));
							AGORAModel.getInstance().moveProjectModel.sendForTopLevel();
							PopUpManager.addPopUp(FlexGlobals.topLevelApplication.moveProject,FlexGlobals.topLevelApplication.agoraMenu,true);
							PopUpManager.centerPopUp(FlexGlobals.topLevelApplication.moveProject);
						},false,0);
						button.setStyle("chromeColor", 0xA0CADB);
						button.setStyle("skinClass",LeftAlignTextButtonSkin);

						if (!xml.@type != 0) 
						{
							isHostile.selected = false;
							isHostile.label = "Collaborative";
						}
						else 
						{
							isHostile.selected = true;
							isHostile.label = "Adversarial";
						}
						isHostile.enabled = false;
						button.toolTip = xml.@creator;						
						buttonG.addElement(button);
						buttonG.addElement(isIn);
						buttonG.addElement(pbutton);
						pbutton.height=32;
						isIn.height=32;
						button.height=24;
						
						this.projectList.addElement(buttonG);
						if(xml.@is_myprivate==1){
							pbutton.enabled=false;
							button.addEventListener("click", function (arg1:flash.events.Event):void
							{
								currentState="projectsInfo";
								setCurrentProject(arg1.target.name);
								usm.selectedMyProjProjID=arg1.target.name;
								FlexGlobals.topLevelApplication.agoraMenu.createMapinProjectBtn.visible=true;
								FlexGlobals.topLevelApplication.agoraMenu.ProjBtn.visible=true;
								FlexGlobals.topLevelApplication.agoraMenu.backInProj.visible=true;
								projectName.text=arg1.target.label;
								memberGroup.visible=false;
								renameProj.visible=false;
								delProj.visible=false;
							}, false, 1, false)

						}else{
							button.addEventListener("click", function (arg1:flash.events.Event):void
							{
								currentState="projectsInfo";
								setCurrentProject(arg1.target.name);
								usm.selectedMyProjProjID=arg1.target.name;
								FlexGlobals.topLevelApplication.agoraMenu.createMapinProjectBtn.visible=true;
								FlexGlobals.topLevelApplication.agoraMenu.ProjBtn.visible=true;
								FlexGlobals.topLevelApplication.agoraMenu.backInProj.visible=true;
								projectName.text=arg1.target.label;
								memberGroup.visible=true;
								renameProj.visible=true;
								delProj.visible=true;

							}, false, 1, false)
						}
					}
				}
			}
		}
		public function populateMap():void{
			loadingDisplay.visible=false;

			
			mapPanel.removeAllElements();
			loadingDisplay.visible=false;
			mapMetaDataVector = new Vector.<MapMetaData>(0,false);
			trace("loading maps for the project");
			for each (var map:XML in model.mapList.map)
			{
					
				
				//var mapObject:Object = new Object;
				mapMetaData = new MapMetaData;
				trace("map " +  map.@Name + " being loaded");
				mapMetaData.mapID = map.@MapID;
				mapMetaData.mapName = map.@MapTitle;
				mapMetaData.mapCreator = map.@creator;
				mapMetaData.firstname = map.@firstname;
				mapMetaData.lastname = map.@lastname;
				mapMetaData.url = map.@url;
				mapMetaDataVector.push(mapMetaData);						
			}
			
			mapMetaDataVector.sort(MapMetaData.isGreater);
			var i:int = 0;
			for each(var mapMetaData:MapMetaData in mapMetaDataVector){
				var mapButton:Button = new Button;
				mapButton.setStyle("chromeColor", 0xF99653);
				mapButton.percentWidth = 100;
				mapButton.name = mapMetaData.mapID.toString();
				mapButton.label = mapMetaData.mapName;
				mapButton.id = i.toString();
				mapButton.addEventListener(MouseEvent.CLICK, onMapObjectClicked);
				trace("map " + mapMetaData.mapName + " officially added as a button");
				mapButton.toolTip = mapMetaData.mapName;
				mapPanel.addElement(mapButton);
				i++;
			}			
		}
			public  function populateUser():void{
				loadingDisplay.visible=false;
				if(model.userList.hasOwnProperty("userList")){
					projectName.text=model.userList.proj.@title;

				}
				projectMemberPanel.removeAllElements();
				for each (var projectXML:XML in model.userList.proj.users.userDetail)
				{
						if(!(projectXML.@userid==AGORAModel.getInstance().userSessionModel._uid)){
						var btnProjMembers:RadioButton = new RadioButton();
						btnProjMembers.group=usersList;
						
						btnProjMembers.value=projectXML.@userid;
						btnProjMembers.label = projectXML.@name ;
						btnProjMembers.setStyle("chromeColor", 0xF99653);
						projectMemberPanel.addElement (btnProjMembers);
					}
				}
			}

        internal function getProjectPanel(arg1:flash.events.MouseEvent):void
        {
            var loc1:*=arg1.target as spark.components.Button;
            return;
        }

        protected function onMapObjectClicked(arg1:flash.events.MouseEvent):void
        {
            Controller.ArgumentController.getInstance().loadMap(arg1.target.name);
            return;
        }

        internal function showSignInBox(arg1:flash.events.MouseEvent):void
        {
            Controller.UserSessionController.getInstance().showSignInBox();
            return;
        }

        internal function _MyProjectsPane_Boolean1_i():Boolean
        {
            var loc1:*=false;
            this.inited = loc1;
            mx.binding.BindingManager.executeBindings(this, "inited", this.inited);
            return loc1;
        }


		]]>
</fx:Script>
</s:VGroup>
