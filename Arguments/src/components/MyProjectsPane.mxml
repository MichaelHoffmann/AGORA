<?xml version="1.0" encoding="UTF-8"?>
<s:VGroup percentWidth="100" initialize="{init()}" xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx" >
    <fx:Declarations>
        <fx:XML id="projXML">
        </fx:XML>
        <s:RadioButtonGroup id="projectListRadio" />
    </fx:Declarations>
        <s:VGroup percentWidth="100" horizontalAlign="center">
                <mx:Text id="loadingDisplay" />
                <mx:Text id="signIn" />
        </s:VGroup>
        <s:HGroup percentWidth="100" horizontalAlign="center" top="0" gap="25" minHeight="350" horizontalCenter="0">
                <s:VGroup percentWidth="30">
                    <s:HGroup percentWidth="100">
                            <s:Label text="Projects" width = "120" />
                            <s:Label text="Type" right="0" />
                    </s:HGroup>
                    <s:Scroller percentWidth="100" height="300">
                        <s:viewport>
                            <s:HGroup>
                                    <s:VGroup visible="false" id="projectList" />
                                    <s:VGroup visible="false" id="isHostileList" />
                            </s:HGroup>
                        </s:viewport>
                    </s:Scroller>
                    <s:HGroup percentWidth="100">
                            <s:Button id = "delProj" label="delete" />
                            <s:Button id="renameProj" label="rename" />
                    </s:HGroup>
                </s:VGroup>
                <s:VGroup percentWidth="30" visible="false" id="mapList">
                        <s:Label text="Maps in project" />
                        <s:Scroller percentWidth="100" height="300">
                            <s:viewport>
                                <s:VGroup percentWidth="100" height="260" id="listMyMaps" />
                            </s:viewport>
                        </s:Scroller>
                </s:VGroup>
                <s:VGroup percentWidth="30" height="150" visible="false" id="memberList">
                        <s:Label text="Project Members" />
                        <s:List height="150" percentWidth="100" labelField="@name" id="usersList">
                            <s:dataProvider>
                                <mx:XMLListCollection id="usersXML" />
                            </s:dataProvider>
                        </s:List>
                        <s:Button click="
                                    {
                                        this.addMembers();
                                    }
                                    
                                    " id="_MyProjectsPane_Button3" label='{classes.Language.lookup("AddProjectMembers")}' />
                        <s:Button click="
                                    {
                                        this.removeMembers();
                                        return;
                                    }
                                    
                                    " id="_MyProjectsPane_Button4" label='{classes.Language.lookup("RemoveMembers")}' />
                        <s:Button click='
                                    {
                                        mx.controls.Alert.show("Are you sure you want to make this user the administrator?  You will no longer be admin of this project");
                                        return;
                                    }
                                    
                                    ' id="_MyProjectsPane_Button5" label='{classes.Language.lookup("SelectAdmin")}' />
                </s:VGroup>
        </s:HGroup>
        <s:HGroup horizontalAlign="center" percentWidth="100">
                <fx:Array>
                    <s:Label text="If you want to create a new project elsewhere, determine its location in the 'World of Arguments'" />
                </fx:Array>
        </s:HGroup>
    <fx:Script>
        <![CDATA[
			import Controller.*;
			
			import Events.*;
			
			import Model.*;
			
			import ValueObjects.*;
			
			import __AS3__.vec.*;
			
			import classes.*;
			
			import flash.accessibility.*;
			import flash.debugger.*;
			import flash.display.*;
			import flash.errors.*;
			import flash.events.*;
			import flash.external.*;
			import flash.geom.*;
			import flash.media.*;
			import flash.net.*;
			import flash.printing.*;
			import flash.profiler.*;
			import flash.system.*;
			import flash.text.*;
			import flash.ui.*;
			import flash.utils.*;
			import flash.xml.*;
			
			import mx.controls.Alert;
			import mx.core.*;
			import mx.events.*;
			import mx.filters.*;
			import mx.rpc.events.*;
			import mx.rpc.http.*;
			import mx.styles.*;
        
        public function init():void
        {
            this.projMapModel = Model.AGORAModel.getInstance().loadProjMaps;
            this.model = Model.AGORAModel.getInstance().myProjectsModel;
            this.loadingDisplay.text = classes.Language.lookup("Loading");
            this.signIn.horizontalCenter = 0;
            this.signIn.setStyle("textDecoration", "underline");
            this.signIn.text = classes.Language.lookup("SignInToViewProj");
            this.signIn.addEventListener(flash.events.MouseEvent.CLICK, this.showSignInBox);
            this.populateProjects();
            return;
        }

        public function removeMembers():void
        {
            var usersDetail:Array=new Array();
			usersDetail.push(this.usersXML[this.usersList.selectedIndex].@userid);
            Model.AGORAModel.getInstance().agoraMapModel.projectUsers = usersDetail;
            Controller.AGORAController.getInstance().removeMembers();
        }

        public function addMembers():void
        {
            Controller.AGORAController.getInstance().displayProjectInfoBox("addUsers");
        }
			public function setCurrentProject(projID:String):void
			{
				this.loadingDisplay.visible=true;
				var usm:UserSessionModel=AGORAModel.getInstance().userSessionModel;
				usm.selectedProjID = projID;			var listProjMaps:HTTPService=new mx.rpc.http.HTTPService();
				var usm:UserSessionModel=AGORAModel.getInstance().userSessionModel;
				listProjMaps.resultFormat = "e4x";
				listProjMaps.url = ValueObjects.AGORAParameters.getInstance().listProjMaps;
				listProjMaps.addEventListener(mx.rpc.events.ResultEvent.RESULT, this.onMaps);
				listProjMaps.addEventListener(mx.rpc.events.FaultEvent.FAULT, this.onFault);
				listProjMaps.send({"uid":usm.uid, "pass_hash":usm.passHash, "category_id":projID});
				var projDetails:HTTPService=new mx.rpc.http.HTTPService();
				var usm:UserSessionModel=AGORAModel.getInstance().userSessionModel;
				projDetails.resultFormat = "e4x";
				projDetails.url = ValueObjects.AGORAParameters.getInstance().projectDetailsURL;
				projDetails.addEventListener(mx.rpc.events.ResultEvent.RESULT, this.onDetails);
				projDetails.addEventListener(mx.rpc.events.FaultEvent.FAULT, this.onFault);
				projDetails.send({"uid":usm.uid, "pass_hash":usm.passHash, "projID":projID});
				usm.selectedProjID = projID;
		}


        protected function onFault(fault:FaultEvent):void
        {
            removeEventListener(mx.rpc.events.ResultEvent.RESULT, this.onDetails);
            removeEventListener(mx.rpc.events.FaultEvent.FAULT, this.onFault);
            dispatchEvent(new Events.AGORAEvent(Events.AGORAEvent.FAULT));
        }

        protected function onDetails(resut:ResultEvent):void
        {
            removeEventListener(mx.rpc.events.ResultEvent.RESULT, this.onDetails);
            removeEventListener(mx.rpc.events.FaultEvent.FAULT, this.onFault);
            this.projXML = resut.result.proj[0] as XML;
			if(this.projXML){
            	var users=this.projXML.users;
				this.usersXML.source = users.children();

			}else{
				this.usersXML.source=null;
			}
			this.loadingDisplay.visible=false;

			populateProjects();


        }
        protected function onMaps(event:ResultEvent):void
        {
            removeEventListener(mx.rpc.events.ResultEvent.RESULT, this.onMaps);
            removeEventListener(mx.rpc.events.FaultEvent.FAULT, this.onFault);
            this.mapListXML = event.result as XML;
			this.loadingDisplay.visible=false;

			populateProjects();
		}
		public function populateProjects():void{
			var usm:Model.UserSessionModel;
			var xml:XML;
			var buttonG:spark.components.HGroup;
			var button:spark.components.RadioButton;
			var isHostile:spark.components.ToggleButton;
			var baseID;
			var loc1:*;
			buttonG = null;
			button = null;
			isHostile = null;
			usm = Model.AGORAModel.getInstance().userSessionModel;
			this.projectList.removeAllElements();
			this.listMyMaps.removeAllElements();
			this.populateMaps();
			if (usm.loggedIn()) 
			{
				this.signIn.visible = false;
				this.projectList.visible = true;
				if (this.model.projectList) 
				{
					trace("loadingProjects")
					var loc2:*=0;
					var loc3:*=this.model.projectList.ProjectList.proj;

					for each (xml in loc3) 
					{
						buttonG = new spark.components.HGroup();
						button = new spark.components.RadioButton();
						button.maxWidth=100;
						isHostile = new spark.components.ToggleButton();
						button.group = this.projectListRadio;
						button.name = xml.@ID;
						button.label = xml.@title;
						button.width=30;
						if (!xml.@type != 0) 
						{
							isHostile.selected = false;
							isHostile.label = "Collaborative";
						}
						else 
						{
							isHostile.selected = true;
							isHostile.label = "Adversarial";
						}
						isHostile.enabled = false;
						button.toolTip = xml.@creator;
						button.percentWidth = 90;
						buttonG.percentWidth = 100;

						if(usm.selectedProjID){
							if(xml.@ID==usm.selectedProjID){
								button.selected=true;
								usm.selectedProjID=xml.@ID;
							}
						}
						
						buttonG.addElement(button);
						buttonG.addElement(isHostile);
						this.projectList.addElement(buttonG);
						if(xml.@is_myprivate==1){
							if(!usm.selectedProjID){
								usm.selectedProjID=xml.@ID;
								setCurrentProject(button.name);
								button.selected=true;

							mapList.visible=true;
							renameProj.visible=false;
							memberList.visible=false;
							delProj.visible=false;
							}

							button.addEventListener("click", function (arg1:flash.events.Event):void
							{
								memberList.visible = false;
								mapList.visible=true;
								renameProj.visible=false;
								delProj.visible=false;								arg1.stopImmediatePropagation();
								setCurrentProject(arg1.target.name);
								return;
							}, false, 1, false)

						}
						else{
							
							button.addEventListener("click", function (arg1:flash.events.Event):void
							{	mapList.visible=true;
								renameProj.visible=true;
								delProj.visible=true;
							memberList.visible = true;
							arg1.stopImmediatePropagation();
							setCurrentProject(arg1.target.name);
							return;
							if(usm.selectedProjID==button.name){
								button.selected=true;
								setCurrentProject(button.name);
								memberList.visible = true;
								mapList.visible=true;
								renameProj.visible=true;
								delProj.visible=true;								arg1.stopImmediatePropagation();

							}
						}, false, 1, false)
					}
				}
			}
		}
		}
		protected function populateUsers():void{
				
		}
        public function populateMaps():void
        {
            var map:XML;
            var i:int;
            var mapMetaData:Model.MapMetaData;
            var maps:XMLList;
            var mapButton:spark.components.Button;

            var loc1:*;
            map = null;
            i = 0;
            mapMetaData = null;
            maps = null;
            mapButton = null;
            if (this.listMyMaps.numElements > 0) 
            {
                this.listMyMaps.removeAllElements();
            }
            if (this.mapListXML && this.mapListXML.map) 
            {
                maps = this.mapListXML.map;
            }
            this.mapMetaDataVector = new Vector.<Model.MapMetaData>(0, false);
            var loc2:*=0;
            var loc3:*=maps;
            for each (map in loc3) 
            {
                try 
                {
                    if (map.@is_deleted == "1") 
                    {
                        continue;
                    }
                }
                catch (error:Error)
                {
                };
                mapMetaData = new Model.MapMetaData();
                mapMetaData.mapID = map.@MapID;
                mapMetaData.mapName = map.@MapTitle;
                this.mapMetaDataVector.push(mapMetaData);
            }
            this.mapMetaDataVector.sort(Model.MapMetaData.isGreater);
            i = 0;
            loc2 = 0;
            loc3 = this.mapMetaDataVector;
            for each (mapMetaData in loc3) 
            {
                mapButton = new spark.components.Button();
                mapButton.percentWidth = 100;
                mapButton.setStyle("backgroundColor", 16356947);
                mapButton.name = mapMetaData.mapID.toString();
                mapButton.addEventListener(flash.events.MouseEvent.CLICK, this.onMapObjectClicked);
                mapButton.label = mapMetaData.mapName;
                this.listMyMaps.addElement(mapButton);
            }
            return;
        }


        internal function getProjectPanel(arg1:flash.events.MouseEvent):void
        {
            var loc1:*=arg1.target as spark.components.Button;
            return;
        }

        protected function onMapObjectClicked(arg1:flash.events.MouseEvent):void
        {
            Controller.ArgumentController.getInstance().loadMap(arg1.target.name);
            return;
        }

        internal function showSignInBox(arg1:flash.events.MouseEvent):void
        {
            Controller.UserSessionController.getInstance().showSignInBox();
            return;
        }

        internal function _MyProjectsPane_Boolean1_i():Boolean
        {
            var loc1:*=false;
            this.inited = loc1;
            mx.binding.BindingManager.executeBindings(this, "inited", this.inited);
            return loc1;
        }

        [Bindable]
        public var inited:Boolean;

        public var model:Model.ProjectsModel;

        public var projMapModel:Model.LoadProjectMapsModel;

        public var mapListXML:XML;

        public var mapMetaDataVector:__AS3__.vec.Vector.<Model.MapMetaData>;

        internal var back:spark.components.Button;
        ]]>
        
    </fx:Script>
</s:VGroup>
