<?xml version="1.0" encoding="UTF-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  currentState="listOfProjects" initialize="{init()}" percentWidth="100">
    <fx:Declarations>
        <fx:XML id="projXML">
        </fx:XML>
		<fx:XMLList id="usersXML">
		</fx:XMLList>
		<fx:XMLList id="mapXML">
		</fx:XMLList>
        <s:RadioButtonGroup id="usersList" />
    </fx:Declarations>
	<s:states>
		<s:State name ="listOfProjects"/>
		<s:State name="projectsInfo"/>
	</s:states>
		<s:VGroup percentWidth="100" horizontalAlign="center">
                <mx:Text id="loadingDisplay" />
                <mx:Text id="signIn" />
        </s:VGroup>
	
        <s:HGroup percentWidth="100" horizontalAlign="center" top="0" gap="25" minHeight="350" horizontalCenter="0" includeIn="listOfProjects">
			<s:Scroller percentWidth="100" height="300" >
				<s:viewport>
						<s:VGroup visible="false" id="projectList" percentWidth="100"/>
				</s:viewport>
			</s:Scroller>
		</s:HGroup>

		<s:HGroup percentWidth="100"  gap="25" minHeight="350" horizontalCenter="0" includeIn="projectsInfo">
				
                <s:VGroup percentWidth="100">
                    <s:HGroup percentWidth="100" gap ="20">
                            <s:VGroup percentWidth="30">
								<s:Label text="Project" width = "120" />
								<s:Label text="" id="projectName"/>
								<s:HGroup percentWidth="100">
									<s:Button id = "delProj" label="delete" />
									<s:Button id="renameProj" label="rename" />
								</s:HGroup>
							</s:VGroup>
							<s:VGroup percentWidth="15">
                            	<s:Label text="Project Type" />	
								<s:ToggleButton label="Adversarial" enabled="false" percentWidth="100"/>
							</s:VGroup>
							<s:VGroup percentWidth="35">
								<s:Label text= "Maps in this Project" />
								<s:Scroller percentWidth="100">
									<s:VGroup  height="260" id="mapPanel" percentWidth="100">
										
									</s:VGroup>
								</s:Scroller>
							</s:VGroup>
							<s:VGroup percentWidth="20">
								<s:Label text= "Users" />
								<s:Scroller percentWidth="100">
									<s:VGroup id="memberList" percentWidth="100">
										<s:VGroup height="150" percentWidth="100"  id="projectMemberPanel">

										</s:VGroup>
										<s:Button percentWidth="100" click="
												  {
												  this.addMembers();
												  }
												  
												  " id="_MyProjectsPane_Button3" label='{classes.Language.lookup("AddProjectMembers")}' />
										<s:Button percentWidth="100" click="
												  {
												  this.removeMembers();
												  return;
												  }
												  
												  " id="_MyProjectsPane_Button4" label='{classes.Language.lookup("RemoveMembers")}' />
										<s:Button percentWidth="100" click='
												  {
												  mx.controls.Alert.show("Are you sure you want to make this user the administrator?  You will no longer be admin of this project");
												  return;
												  }
												  
												  ' id="_MyProjectsPane_Button5" label='{classes.Language.lookup("SelectAdmin")}' />

									</s:VGroup>
								</s:Scroller>
							</s:VGroup>
						</s:HGroup>
                </s:VGroup>
        </s:HGroup>
        <s:HGroup horizontalAlign="center" percentWidth="100">
                    <s:Label text="If you want to create a new project elsewhere, determine its location in the 'World of Arguments'" />
        </s:HGroup>
    <fx:Script>
        <![CDATA[
			import Controller.*;
			
			import Events.*;
			
			import Model.*;
			
			import ValueObjects.*;
			
			import __AS3__.vec.*;
			
			import classes.*;
			
			import flash.accessibility.*;
			import flash.debugger.*;
			import flash.display.*;
			import flash.errors.*;
			import flash.events.*;
			import flash.external.*;
			import flash.geom.*;
			import flash.media.*;
			import flash.net.*;
			import flash.printing.*;
			import flash.profiler.*;
			import flash.system.*;
			import flash.text.*;
			import flash.ui.*;
			import flash.utils.*;
			import flash.xml.*;
			
			import mx.controls.Alert;
			import mx.core.*;
			import mx.events.*;
			import mx.filters.*;
			import mx.rpc.events.*;
			import mx.rpc.http.*;
			import mx.styles.*;
			
			import spark.components.RadioButton;
        
        public function init():void
        {
            this.projMapModel = Model.AGORAModel.getInstance().loadProjMaps;
            this.model = Model.AGORAModel.getInstance().myProjectsModel;
            this.loadingDisplay.text = classes.Language.lookup("Loading");
            this.signIn.horizontalCenter = 0;
            this.signIn.setStyle("textDecoration", "underline");
            this.signIn.text = classes.Language.lookup("SignInToViewProj");
            this.signIn.addEventListener(flash.events.MouseEvent.CLICK, this.showSignInBox);
            this.populateProjects();
            return;
        }

        public function removeMembers():void
        {
            var usersDetail:Array=new Array();
			usersDetail.push(usersList.selectedValue);
            Model.AGORAModel.getInstance().agoraMapModel.projectUsers = usersDetail;
            Controller.AGORAController.getInstance().removeMembers();
        }

        public function addMembers():void
        {
            Controller.AGORAController.getInstance().displayProjectInfoBox("addUsers");
        }
			public function setCurrentProject(projID:String):void
			{
				this.loadingDisplay.visible=true;
				var usm:UserSessionModel=AGORAModel.getInstance().userSessionModel;
				usm.selectedMyProjProjID = projID;			var listProjMaps:HTTPService=new mx.rpc.http.HTTPService();
				var usm:UserSessionModel=AGORAModel.getInstance().userSessionModel;
				listProjMaps.resultFormat = "e4x";
				listProjMaps.url = ValueObjects.AGORAParameters.getInstance().listProjMaps;
				listProjMaps.addEventListener(mx.rpc.events.ResultEvent.RESULT, this.onMapDetails);
				listProjMaps.addEventListener(mx.rpc.events.FaultEvent.FAULT, this.onFault);
				listProjMaps.send({"uid":usm.uid, "pass_hash":usm.passHash, "category_id":projID});
				var projDetails:HTTPService=new mx.rpc.http.HTTPService();
				var usm:UserSessionModel=AGORAModel.getInstance().userSessionModel;
				projDetails.resultFormat = "e4x";
				projDetails.url = ValueObjects.AGORAParameters.getInstance().projectDetailsURL;
				projDetails.addEventListener(mx.rpc.events.ResultEvent.RESULT, this.onUserDetails);
				projDetails.addEventListener(mx.rpc.events.FaultEvent.FAULT, this.onFault);
				projDetails.send({"uid":usm.uid, "pass_hash":usm.passHash, "projID":projID});
				usm.selectedMyProjProjID = projID;
		}
	

        protected function onFault(fault:FaultEvent):void
        {
            removeEventListener(mx.rpc.events.FaultEvent.FAULT, this.onFault);
            dispatchEvent(new Events.AGORAEvent(Events.AGORAEvent.FAULT));
        }
		protected function onMapDetails(event:ResultEvent):void{
			removeEventListener(mx.rpc.events.ResultEvent.RESULT, this.onMapDetails);
			removeEventListener(mx.rpc.events.FaultEvent.FAULT, this.onFault);
			mapListXML = event.result as XML;
			loadingDisplay.visible=false;
			populateMaps();
		}
        protected function onUserDetails(event:ResultEvent):void
        {
            removeEventListener(mx.rpc.events.ResultEvent.RESULT, this.onUserDetails);
            removeEventListener(mx.rpc.events.FaultEvent.FAULT, this.onFault);
            this.projXML = event.result.proj[0] as XML;
			if(this.projXML){
            	var users=this.projXML.users;
				usersXML = users.children();

			}else{
				//this.usersXML.source=null;
			}
			if(!event.result.proj[0].@title){
				projectName.text=event.result.proj[0].@title;
			}else{
				projectName.text="Private project"
			}
			this.loadingDisplay.visible=false;
			populateUsers();


        }
        protected function onMaps(event:ResultEvent):void
        {
            removeEventListener(mx.rpc.events.ResultEvent.RESULT, this.onMaps);
            removeEventListener(mx.rpc.events.FaultEvent.FAULT, this.onFault);
            this.mapListXML = event.result as XML;
			this.loadingDisplay.visible=false;
			populateProjects();
		}
		public function populateProjects():void{
			var usm:Model.UserSessionModel;
			var xml:XML;
			var buttonG:spark.components.HGroup;
			var button:Button;
			var pbutton:Button;
			var isHostile:spark.components.ToggleButton;
			var baseID;
			var loc1:*;
			buttonG = null;
			button = null;
			isHostile = null;
			usm = Model.AGORAModel.getInstance().userSessionModel;
			if (usm.loggedIn()) 
			{
				this.signIn.visible = false;
				this.projectList.visible = true;
				if (this.model.projectList) 
				{
					trace("loadingProjects")
					var loc2:*=0;
					var loc3:*=this.model.projectList.ProjectList.proj;

					for each (xml in loc3) 
					{
						var isIn:Label = new Label();
						isIn.text="is in";

						buttonG = new spark.components.HGroup();
						buttonG.percentWidth = 100;
						button = new Button();
						isHostile = new spark.components.ToggleButton();
						button.name = xml.@ID;
						button.percentWidth=40;
						button.label = xml.@title;
						pbutton = new Button();
						pbutton.percentWidth=40;
						pbutton.label= xml.@pname;

						if (!xml.@type != 0) 
						{
							isHostile.selected = false;
							isHostile.label = "Collaborative";
						}
						else 
						{
							isHostile.selected = true;
							isHostile.label = "Adversarial";
						}
						isHostile.enabled = false;
						button.toolTip = xml.@creator;						
						buttonG.addElement(button);
						buttonG.addElement(isHostile);
						buttonG.addElement(isIn);
						buttonG.addElement(pbutton);
						this.projectList.addElement(buttonG);
							
							button.addEventListener("click", function (arg1:flash.events.Event):void
							{
								currentState="projectsInfo";
								setCurrentProject(arg1.target.name);
								usm.selectedMyProjProjID=arg1.target.name;
								FlexGlobals.topLevelApplication.agoraMenu.createMapinProjectBtn.visible=true;
								FlexGlobals.topLevelApplication.agoraMenu.ProjBtn.visible=true;
								FlexGlobals.topLevelApplication.agoraMenu.backInProj.visible=true;
								if(xml.@is_myprivate==1){
									memberList.visible=false;
								}else{
									memberList.visible=true;
									

								}
						}, false, 1, false)
					}
				}
			}
		}
		private function populateMaps():void{
			mapPanel.removeAllElements();
			mapMetaDataVector = new Vector.<MapMetaData>(0,false);
			var maps:XMLList;
			if (this.mapListXML && this.mapListXML.map) 
			{
 				maps = this.mapListXML.map;
    			}
			trace("loading maps for the project");
			for each (var map:XML in maps)
			{
				trace();
					
				//var mapObject:Object = new Object;
				mapMetaData = new MapMetaData;
				trace("map " +  map.@Name + " being loaded");
				mapMetaData.mapID = map.@MapID;
				mapMetaData.mapName = map.@MapTitle;
				mapMetaData.mapCreator = map.@creator;
				mapMetaData.firstname = map.@firstname;
				mapMetaData.lastname = map.@lastname;
				mapMetaData.url = map.@url;
				mapMetaDataVector.push(mapMetaData);						
			}
			
			mapMetaDataVector.sort(MapMetaData.isGreater);
			var i:int = 0;
			for each(var mapMetaData:MapMetaData in mapMetaDataVector){
				var mapButton:Button = new Button;
				mapButton.setStyle("chromeColor", 0xF99653);
				mapButton.percentWidth = 100;
				mapButton.name = mapMetaData.mapID.toString();
				mapButton.label = mapMetaData.mapName;
				mapButton.id = i.toString();
				mapButton.addEventListener(MouseEvent.CLICK, onMapObjectClicked);
				trace("map " + mapMetaData.mapName + " officially added as a button");
				mapButton.toolTip = mapMetaData.mapName;
				mapPanel.addElement(mapButton);
				i++;
			}			
		}
			private function populateUsers():void{
				projectMemberPanel.removeAllElements();
				for each (var projectXML:XML in usersXML)
				{
					var btnProjMembers:RadioButton = new RadioButton();
					btnProjMembers.group=usersList;
					btnProjMembers.value=projectXML.@ID;
					btnProjMembers.height = undefined;
					btnProjMembers.width = undefined;
					btnProjMembers.label = projectXML.@name ;
					btnProjMembers.setStyle("chromeColor", 0xF99653);
					projectMemberPanel.addElement (btnProjMembers);
				}
			}

        internal function getProjectPanel(arg1:flash.events.MouseEvent):void
        {
            var loc1:*=arg1.target as spark.components.Button;
            return;
        }

        protected function onMapObjectClicked(arg1:flash.events.MouseEvent):void
        {
            Controller.ArgumentController.getInstance().loadMap(arg1.target.name);
            return;
        }

        internal function showSignInBox(arg1:flash.events.MouseEvent):void
        {
            Controller.UserSessionController.getInstance().showSignInBox();
            return;
        }

        internal function _MyProjectsPane_Boolean1_i():Boolean
        {
            var loc1:*=false;
            this.inited = loc1;
            mx.binding.BindingManager.executeBindings(this, "inited", this.inited);
            return loc1;
        }

        [Bindable]
        public var inited:Boolean;

        public var model:Model.ProjectsModel;

        public var projMapModel:Model.LoadProjectMapsModel;

        public var mapListXML:XML;

        public var mapMetaDataVector:__AS3__.vec.Vector.<Model.MapMetaData>;

        internal var back:spark.components.Button;
        ]]>
        
    </fx:Script>
</s:VGroup>
