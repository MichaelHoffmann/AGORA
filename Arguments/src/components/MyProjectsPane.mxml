<?xml version="1.0" encoding="UTF-8"?>
<s:VGroup percentWidth="100" initialize="
{
    this.init();
    return;
}

" xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx">
    <fx:Declarations>
        <fx:XML id="projXML">
        </fx:XML>
        <s:RadioButtonGroup id="projectListRadio" />
    </fx:Declarations>
    <s:mxmlContent>
        <s:VGroup percentWidth="100" horizontalAlign="center">
            <s:mxmlContent>
                <mx:Text id="loadingDisplay" />
                <mx:Text id="signIn" />
            </s:mxmlContent>
        </s:VGroup>
        <s:HGroup percentWidth="100" horizontalAlign="center" top="0" gap="25" minHeight="350" horizontalCenter="0">
            <s:mxmlContent>
                <s:VGroup percentWidth="30">
                    <s:mxmlContent>
                        <s:HGroup percentWidth="100">
                            <s:mxmlContent>
                                <s:Label text="Projects" />
                                <s:Label text="Type" right="0" />
                            </s:mxmlContent>
                        </s:HGroup>
                        <s:Scroller percentWidth="100" height="300">
                            <s:viewport>
                                <s:HGroup>
                                    <s:mxmlContent>
                                        <s:VGroup visible="false" id="projectList" />
                                        <s:VGroup visible="false" id="isHostileList" />
                                    </s:mxmlContent>
                                </s:HGroup>
                            </s:viewport>
                        </s:Scroller>
                        <s:HGroup percentWidth="100">
                            <s:mxmlContent>
                                <s:Button label="delete" />
                                <s:Button label="rename" />
                            </s:mxmlContent>
                        </s:HGroup>
                    </s:mxmlContent>
                </s:VGroup>
                <s:VGroup percentWidth="30" visible="false" id="mapList">
                    <s:mxmlContent>
                        <s:Label text="Maps in project" />
                        <s:Scroller percentWidth="100" height="300">
                            <s:viewport>
                                <s:VGroup percentWidth="100" height="260" id="listMyMaps" />
                            </s:viewport>
                        </s:Scroller>
                    </s:mxmlContent>
                </s:VGroup>
                <s:VGroup percentWidth="30" height="150" visible="false" id="memberList">
                    <s:mxmlContent>
                        <s:Label text="Project Members" />
                        <s:List height="150" percentWidth="100" labelField="@name" id="usersList">
                            <s:dataProvider>
                                <mx:XMLListCollection id="usersXML" />
                            </s:dataProvider>
                        </s:List>
                        <s:Button click="
                                    {
                                        this.addMembers();
                                        return;
                                    }
                                    
                                    " id="_MyProjectsPane_Button3" label='{classes.Language.lookup("AddProjectMembers")}' />
                        <s:Button click="
                                    {
                                        this.removeMembers();
                                        return;
                                    }
                                    
                                    " id="_MyProjectsPane_Button4" label='{classes.Language.lookup("RemoveMembers")}' />
                        <s:Button click='
                                    {
                                        mx.controls.Alert.show("Are you sure you want to make this user the administrator?  You will no longer be admin of this project");
                                        return;
                                    }
                                    
                                    ' id="_MyProjectsPane_Button5" label='{classes.Language.lookup("SelectAdmin")}' />
                    </s:mxmlContent>
                </s:VGroup>
            </s:mxmlContent>
        </s:HGroup>
        <s:HGroup horizontalAlign="center" percentWidth="100">
            <s:mxmlContent>
                <fx:Array>
                    <s:Label text="If you want to create a project outside of your own projects, you must navigate to it through the World of Arguments." />
                </fx:Array>
            </s:mxmlContent>
        </s:HGroup>
    </s:mxmlContent>
    <fx:Script>
        <![CDATA[
        import Controller.*;
        import Events.*;
        import Model.*;
        import ValueObjects.*;
        import __AS3__.vec.*;
        import classes.*;
        import flash.accessibility.*;
        import flash.debugger.*;
        import flash.display.*;
        import flash.errors.*;
        import flash.events.*;
        import flash.external.*;
        import flash.geom.*;
        import flash.media.*;
        import flash.net.*;
        import flash.printing.*;
        import flash.profiler.*;
        import flash.system.*;
        import flash.text.*;
        import flash.ui.*;
        import flash.utils.*;
        import flash.xml.*;
        import mx.core.*;
        import mx.events.*;
        import mx.filters.*;
        import mx.rpc.events.*;
        import mx.rpc.http.*;
        import mx.styles.*;
        
        public function init():void
        {
            this.projMapModel = Model.AGORAModel.getInstance().loadProjMaps;
            this.model = Model.AGORAModel.getInstance().myProjectsModel;
            this.loadingDisplay.text = classes.Language.lookup("Loading");
            this.signIn.horizontalCenter = 0;
            this.signIn.setStyle("textDecoration", "underline");
            this.signIn.text = classes.Language.lookup("SignInToViewProj");
            this.signIn.addEventListener(flash.events.MouseEvent.CLICK, this.showSignInBox);
            this.commitProperties();
            return;
        }

        public function removeMembers():void
        {
            var loc1:*=new Array();
            loc1.push(this.usersXML[this.usersList.selectedIndex].@userid);
            Model.AGORAModel.getInstance().agoraMapModel.projectUsers = loc1;
            Controller.AGORAController.getInstance().removeMembers();
            return;
        }

        public function addMembers():void
        {
            Controller.AGORAController.getInstance().displayProjectInfoBox("addUsers");
            return;
        }

        public function setCurrentProject(arg1:String):void
        {
            var loc1:*=new mx.rpc.http.HTTPService();
            var loc2:*=new mx.rpc.http.HTTPService();
            var loc3:*;
            (loc3 = Model.AGORAModel.getInstance().userSessionModel).selectedProjID = arg1;
            loc2.resultFormat = "e4x";
            loc2.url = ValueObjects.AGORAParameters.getInstance().listProjMaps;
            loc2.addEventListener(mx.rpc.events.ResultEvent.RESULT, this.onMaps);
            loc2.addEventListener(mx.rpc.events.FaultEvent.FAULT, this.onFault);
            loc2.send({"uid":loc3.uid, "pass_hash":loc3.passHash, "category_id":arg1});
            loc1.resultFormat = "e4x";
            loc1.url = ValueObjects.AGORAParameters.getInstance().projectDetailsURL;
            loc1.addEventListener(mx.rpc.events.ResultEvent.RESULT, this.onDetails);
            loc1.addEventListener(mx.rpc.events.FaultEvent.FAULT, this.onFault);
            loc1.send({"uid":loc3.uid, "pass_hash":loc3.passHash, "projID":arg1});
            Model.AGORAModel.getInstance().agoraMapModel.projectID = arg1 as int;
            return;
        }

        protected function onFault(arg1:mx.rpc.events.FaultEvent):void
        {
            removeEventListener(mx.rpc.events.ResultEvent.RESULT, this.onDetails);
            removeEventListener(mx.rpc.events.FaultEvent.FAULT, this.onFault);
            dispatchEvent(new Events.AGORAEvent(Events.AGORAEvent.FAULT));
            return;
        }

        protected function onDetails(arg1:mx.rpc.events.ResultEvent):void
        {
            removeEventListener(mx.rpc.events.ResultEvent.RESULT, this.onDetails);
            removeEventListener(mx.rpc.events.FaultEvent.FAULT, this.onFault);
            this.projXML = arg1.result.proj[0] as XML;
            var loc1:*=this.projXML.users;
            this.usersXML.source = loc1.children();
            return;
        }

        protected function onMaps(arg1:mx.rpc.events.ResultEvent):void
        {
            removeEventListener(mx.rpc.events.ResultEvent.RESULT, this.onMaps);
            removeEventListener(mx.rpc.events.FaultEvent.FAULT, this.onFault);
            this.mapListXML = arg1.result as XML;
            this.populateMaps();
            return;
        }

        protected function populateMaps():void
        {
            var map:XML;
            var i:int;
            var mapMetaData:Model.MapMetaData;
            var maps:XMLList;
            var mapButton:spark.components.Button;

            var loc1:*;
            map = null;
            i = 0;
            mapMetaData = null;
            maps = null;
            mapButton = null;
            if (this.listMyMaps.numElements > 0) 
            {
                this.listMyMaps.removeAllElements();
            }
            if (this.mapListXML && this.mapListXML.map) 
            {
                maps = this.mapListXML.map;
            }
            this.mapMetaDataVector = new Vector.<Model.MapMetaData>(0, false);
            var loc2:*=0;
            var loc3:*=maps;
            for each (map in loc3) 
            {
                try 
                {
                    if (map.@is_deleted == "1") 
                    {
                        continue;
                    }
                }
                catch (error:Error)
                {
                };
                mapMetaData = new Model.MapMetaData();
                mapMetaData.mapID = map.@MapID;
                mapMetaData.mapName = map.@MapTitle;
                this.mapMetaDataVector.push(mapMetaData);
            }
            this.mapMetaDataVector.sort(Model.MapMetaData.isGreater);
            i = 0;
            loc2 = 0;
            loc3 = this.mapMetaDataVector;
            for each (mapMetaData in loc3) 
            {
                mapButton = new spark.components.Button();
                mapButton.percentWidth = 100;
                mapButton.setStyle("backgroundColor", 16356947);
                mapButton.name = mapMetaData.mapID.toString();
                mapButton.addEventListener(flash.events.MouseEvent.CLICK, this.onMapObjectClicked);
                mapButton.label = mapMetaData.mapName;
                this.listMyMaps.addElement(mapButton);
            }
            return;
        }

        protected override function commitProperties():void
        {
            var usm:Model.UserSessionModel;
            var xml:XML;
            var buttonG:spark.components.HGroup;
            var button:spark.components.RadioButton;
            var isHostile:spark.components.ToggleButton;

            var loc1:*;
            xml = null;
            buttonG = null;
            button = null;
            isHostile = null;
            super.commitProperties();
            usm = Model.AGORAModel.getInstance().userSessionModel;
            this.projectList.removeAllElements();
            this.listMyMaps.removeAllElements();
            this.populateMaps();
            if (usm.loggedIn()) 
            {
                this.signIn.visible = false;
                this.projectList.visible = true;
                if (this.model.projectList) 
                {
                    var loc2:*=0;
                    var loc3:*=this.model.projectList.proj;
                    for each (xml in loc3) 
                    {
                        buttonG = new spark.components.HGroup();
                        button = new spark.components.RadioButton();
                        isHostile = new spark.components.ToggleButton();
                        button.group = this.projectListRadio;
                        button.name = xml.@ID;
                        button.label = xml.@title;
                        if (!xml.@type != 0) 
                        {
                            isHostile.selected = false;
                            isHostile.label = "Collaborative";
                        }
                        else 
                        {
                            isHostile.selected = true;
                            isHostile.label = "Adversarial";
                        }
                        isHostile.enabled = false;
                        button.toolTip = xml.@creator;
                        button.percentWidth = 90;
                        buttonG.percentWidth = 100;
                        buttonG.addElement(button);
                        buttonG.addElement(isHostile);
                        this.projectList.addElement(buttonG);
                        button.addEventListener("click", function (arg1:flash.events.Event):void
                        {
                            mapList.visible = true;
                            memberList.visible = true;
                            arg1.stopImmediatePropagation();
                            Model.AGORAModel.getInstance().agoraMapModel.projectID = arg1.target.name;
                            Model.AGORAModel.getInstance().agoraMapModel.projectName = arg1.target.label;
                            setCurrentProject(arg1.target.name);
                            return;
                        }, false, 1, false)
                    }
                }
            }
            return;
        }

        internal function getProjectPanel(arg1:flash.events.MouseEvent):void
        {
            var loc1:*=arg1.target as spark.components.Button;
            return;
        }

        protected function onMapObjectClicked(arg1:flash.events.MouseEvent):void
        {
            Controller.ArgumentController.getInstance().loadMap(arg1.target.name);
            return;
        }

        internal function showSignInBox(arg1:flash.events.MouseEvent):void
        {
            Controller.UserSessionController.getInstance().showSignInBox();
            return;
        }

        internal function _MyProjectsPane_Boolean1_i():Boolean
        {
            var loc1:*=false;
            this.inited = loc1;
            mx.binding.BindingManager.executeBindings(this, "inited", this.inited);
            return loc1;
        }

        [Bindable]
        public var inited:Boolean;

        public var model:Model.ProjectsModel;

        public var projMapModel:Model.LoadProjectMapsModel;

        public var mapListXML:XML;

        public var mapMetaDataVector:__AS3__.vec.Vector.<Model.MapMetaData>;

        internal var back:spark.components.Button;
        ]]>
        
    </fx:Script>
</s:VGroup>
