<?xml version="1.0" encoding="UTF-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  currentState="listOfProjects" initialize="{init()}" percentWidth="100" horizontalAlign="center" xmlns:components="components.*">
    <fx:Declarations>
        <fx:XML id="projXML">
        </fx:XML>
		<fx:XMLList id="usersXML">
		</fx:XMLList>
		<fx:XMLList id="mapXML">
		</fx:XMLList>
        <s:RadioButtonGroup id="usersList"/>
    </fx:Declarations>
	
	<s:states>
		<s:State name ="listOfProjects"/>
		<s:State name="projectsInfo"/>
	</s:states>

		<s:VGroup percentWidth="100" horizontalAlign="center" height="10">
                <mx:Text id="loadingDisplay" /> 
                <mx:Text id="signIn" />
        </s:VGroup>
	 
        <s:HGroup percentWidth="95" horizontalCenter="0" verticalAlign="middle" horizontalAlign="center" top="0"  minHeight="350" includeIn="listOfProjects">
			<s:Scroller percentWidth="100" height ="400" >
						<s:VGroup gap="5" top ="0" visible="false" id="projectList" percentWidth="100"/>
			</s:Scroller>
		</s:HGroup>
		<components:ProjectView id ="theProject" includeIn="projectsInfo"/>
			
    <fx:Script>
        <![CDATA[
			import Controller.*;
			
			import Events.*;
			
			import Model.*;
			
			import Skins.LeftAlignTextButtonSkin;
			
			import ValueObjects.*;
			
			import __AS3__.vec.*;
			
			import classes.*;
			
			import com.as3xls.xls.Cell;
			import com.as3xls.xls.ExcelFile;
			import com.as3xls.xls.Sheet;
			
			import flash.accessibility.*;
			import flash.debugger.*;
			import flash.display.*;
			import flash.errors.*;
			import flash.events.*;
			import flash.external.*;
			import flash.geom.*;
			import flash.media.*;
			import flash.net.*;
			import flash.printing.*;
			import flash.profiler.*;
			import flash.system.*;
			import flash.text.*;
			import flash.ui.*;
			import flash.utils.*;
			import flash.xml.*;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.*;
			import mx.events.*;
			import mx.filters.*;
			import mx.managers.PopUpManager;
			import mx.rpc.events.*;
			import mx.rpc.http.*;
			import mx.styles.*;
			
			import spark.components.Button;
			import spark.components.Label;
	        private var fileReference:FileReference;
	        private var xls:Class;
	        private var sheet:Sheet;
			
			import spark.components.RadioButton;
			[Bindable]
			public var inited:Boolean;
			
			public var model:Model.ProjectsModel;
			
			public var projMapModel:Model.LoadProjectMapsModel;
			
			public var mapListXML:XML;
			
			public var mapMetaDataVector:__AS3__.vec.Vector.<Model.MapMetaData>;
			private var fileImportElm:FileReference;
			
			internal var back:spark.components.Button;
		
        public function init():void
        {
			loadingDisplay.visible=false;
            this.projMapModel = Model.AGORAModel.getInstance().loadProjMaps;
            this.model = Model.AGORAModel.getInstance().myProjectsModel;
            this.loadingDisplay.text = classes.Language.lookup("Loading");
            this.signIn.horizontalCenter = 0;
            this.signIn.setStyle("textDecoration", "underline");
            this.signIn.text = classes.Language.lookup("SignInToViewProj");
            this.signIn.addEventListener(flash.events.MouseEvent.CLICK, this.showSignInBox);
            this.populateProjects();
            return;
        }

        
			private function alertListener(eventObj:CloseEvent):void {
				// Check to see if the OK button was pressed.
				if (eventObj.detail==Alert.OK) {
					AGORAController.getInstance().selectAsAdmin(usersList.selectedValue.toString());
				}
			}
		
        protected function onFault(fault:FaultEvent):void
        {
            removeEventListener(mx.rpc.events.FaultEvent.FAULT, this.onFault);
            dispatchEvent(new Events.AGORAEvent(Events.AGORAEvent.FAULT));
        }
		public function populateMap():void{
			theProject.populateMap();
		}
		public function setCurrentProject(arg1:*):void{
			theProject.setCurrentProject(arg1);
		}
		public function updateProject():void{
			theProject.updateProject();
		}
		public function populateUser():void{
			theProject.populateUser();
		}
		public function populateSubProjects():void{
			theProject.populateSubProjects();
		}
		public function showAdmin(e:Event):void{
			currentState="projectsInfo";
			theProject.showAdmin(e);
		}
		public function showOwn(e:Event):void{
			currentState="projectsInfo";
			theProject.showOwn(e);
		}
		public function showOther(e:Event):void{
			currentState="projectsInfo";
			theProject.showOther(e);
		}
		public function populateProjects():void{
			loadingDisplay.visible=false;

			var usm:Model.UserSessionModel;
			var xml:XML;
			var buttonG:spark.components.HGroup;
			var button:Button;
			var pbutton:Button;
			var isHostile:spark.components.ToggleButton;
			var baseID;
			var loc1:*;
			buttonG = null;
			button = null;
			isHostile = null;
			usm = Model.AGORAModel.getInstance().userSessionModel;
			if (usm.loggedIn()) 
			{
				this.signIn.visible = false;
				this.projectList.visible = true;
				projectList.removeAllElements();

				if (this.model.projectList) 
				{
					trace("loadingProjects")
					var loc2:*=0;
					var loc3:*=this.model.projectList.ProjectList.proj;

					for each (xml in loc3) 
					{
						var isIn:Label = new Label();
						isIn.text= "\n"+Language.lookup('IsIn');
						buttonG = new spark.components.HGroup();
						buttonG.verticalAlign="middle";

						buttonG.percentWidth = 100;
						buttonG.height =32;
						button = new Button();
						isHostile = new spark.components.ToggleButton();
						button.name = xml.@ID;
						button.percentWidth=60;
						button.label = xml.@title;
						pbutton = new Button();
						pbutton.percentWidth=30;
						isIn.percentWidth=10;
						pbutton.height =24;
						pbutton.toolTip=Language.lookup("ClickToRelocateProject");
						pbutton.label= xml.@parent_name;
						pbutton.id= xml.@ID;
						pbutton.setStyle("chromeColor", 0xA0CADB);
						pbutton.setStyle("skinClass",LeftAlignTextButtonSkin);
						pbutton.addEventListener(MouseEvent.CLICK, function(e:MouseEvent):void{
							if(!FlexGlobals.topLevelApplication.moveProject){
								FlexGlobals.topLevelApplication.moveProject = new MoveProjectPopUpPanel();
							}
							trace("moving a project"+parseInt(((Button)(e.target).id)));
							FlexGlobals.topLevelApplication.moveProject.projectID = parseInt(((Button)(e.target).id));
							AGORAModel.getInstance().moveProjectModel.sendForTopLevel();
							PopUpManager.addPopUp(FlexGlobals.topLevelApplication.moveProject,FlexGlobals.topLevelApplication.agoraMenu,true);
							PopUpManager.centerPopUp(FlexGlobals.topLevelApplication.moveProject);
						},false,0);
						button.setStyle("chromeColor", 0xA0CADB);
						button.setStyle("skinClass",LeftAlignTextButtonSkin);
						button.toolTip = xml.@creator;						
						buttonG.addElement(button);
						buttonG.addElement(isIn);
						buttonG.addElement(pbutton);
						pbutton.height=32;
						isIn.height=32;
						button.height=24;
						
						this.projectList.addElement(buttonG);
						if(xml.@is_myprivate==1){
							pbutton.enabled=false;
							button.addEventListener(MouseEvent.CLICK, showOwn);

						}else if ((xml.@creator).toLowerCase() == (usm.username).toLowerCase()){
							button.addEventListener("click",showAdmin);

							}else{
								button.addEventListener("click", showOther);
						}
					}
				}
			}
		}

        internal function showSignInBox(arg1:flash.events.MouseEvent):void
        {
            Controller.UserSessionController.getInstance().showSignInBox();
            return;
        }

        internal function _MyProjectsPane_Boolean1_i():Boolean
        {
            var loc1:*=false;
            this.inited = loc1;
            mx.binding.BindingManager.executeBindings(this, "inited", this.inited);
            return loc1;
        }


		]]>
</fx:Script>
</s:VGroup>
