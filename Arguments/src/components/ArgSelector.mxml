<?xml version="1.0" encoding="utf-8"?>
<!--
AGORA - an interactive and web-based argument mapping tool that stimulates reasoning, 
reflection, critique, deliberation, and creativity in individual argument construction 
and in collaborative or adversarial settings. 
Copyright (C) 2011 Georgia Institute of Technology

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="400"
		 creationComplete="addEventHandlers(event)">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:Panel skinClass="Skins.TopBarLessPanel" width = "430">
		<s:Label  width="100" id = "mainToolTip" left = "500" text ="" backgroundColor="0xffff00" paddingTop="10" paddingRight="10" paddingLeft="10" paddingBottom="10" visible = "false"  click="{supportPopUp()}"/>

<s:Group width = "400">
	<s:Label text = "?" right = "10" toolTip="Click here for more info"/><!--add translate>-->
	<s:HGroup top = "10">
		<s:VGroup>
			<s:Label text ="Select..."/><!--add translate>-->
			<mx:List id="mainSchemes"
					 dataProvider="{scheme}"
					 rollOverColor="#b2c4e7"
					 textRollOverColor="#FFFFFF"
					 selectionColor="#5577b8"  
					 focusRoundedCorners="tr br tl bl"
					 paddingLeft="8"
					 labelField="name" 
					 toolTip=""/>
		</s:VGroup>
		<s:VGroup>
			<s:Label text ="...and select:" visible="{typeSelector.visible}"/>
			<mx:List id="typeSelector" 
					 dataProvider="{languageTypes}"
					 x="{mainSchemes.width}"
					 rollOverColor="#b2c4e7"
					 textRollOverColor="#FFFFFF"
					 selectionColor="#5577b8"  
					 focusRoundedCorners="tr br tl bl"
					 paddingLeft="8"
					 width="220" visible = "false"/>
		</s:VGroup>
		<!-- itemClick="changeTitle(event)" -->

		
		<mx:List id="andor" 
				 x="{mainSchemes.width+typeSelector.width}"
				 dataProvider="{options}"
				 rollOverColor="#b2c4e7"
				 textRollOverColor="#FFFFFF"
				 selectionColor="#5577b8"  
				 focusRoundedCorners="tr br tl bl"
				 paddingLeft="8" 
				 visible = "false" click = "{this.visible=false}"/>
	</s:HGroup>
</s:Group>				


	</s:Panel>
	
	<fx:Script>
		<![CDATA[
			import Controller.ArgumentController;
			import Controller.logic.*;
			
			import Model.ArgumentTypeModel;
			
			import classes.Language;
			
			import flash.events.Event;
			import flash.events.MouseEvent;
			
			import mx.binding.utils.BindingUtils;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			private var _languageTypes:Array;
			private var _scheme:Array;
			private var _options:Array;
			
			private var _argumentTypeModel:ArgumentTypeModel;
			
			
			
			//------------- Getters and Setters -----------------------//
			public function get argumentTypeModel():ArgumentTypeModel
			{
				return _argumentTypeModel;
			}
			
			public function set argumentTypeModel(value:ArgumentTypeModel):void
			{
				_argumentTypeModel = value;
				//get the infernece and bind it.
				try{
					var panelsHash:Dictionary  = FlexGlobals.topLevelApplication.map.agoraMap.panelsHash;
					var inference:ArgumentPanel = FlexGlobals.topLevelApplication.map.agoraMap.panelsHash[argumentTypeModel.inferenceModel.ID];
					BindingUtils.bindSetter(setX, inference, ["x"]);
					BindingUtils.bindSetter(setY, inference, ["y"]);
				}catch(error:Error){
					trace("ArgSelector::set argumentTypeModel: Error in applying bind setters");	
					trace(error.message);
				}
			}
			
			[Bindable]
			public function get languageTypes():Array{
				return _languageTypes;
			}
			public function set languageTypes(value:Array):void{
				_languageTypes = value;
			}
			
			[Bindable]
			public function set scheme(value:Array):void
			{
				_scheme = value;
			}
			
			public function get scheme():Array
			{
				return _scheme;
			}
			
			public function get options():Array
			{
				return _options;
			}
			
			[Bindable]
			public function set options(value:Array):void
			{
				_options = value;
			}
			
			public function init():void{
				
			}
			
			//------------------ Bind Setters ----------------------------------------------//
			protected function setX(value:int):void{
				var inference:ArgumentPanel = FlexGlobals.topLevelApplication.map.agoraMap.panelsHash[argumentTypeModel.inferenceModel.ID];
				x = value + inference.width;
			}
			protected function setY(value:int):void{
				var inference:ArgumentPanel = FlexGlobals.topLevelApplication.map.agoraMap.panelsHash[argumentTypeModel.inferenceModel.ID];
				y = value;
			}
			
			//----------------- Other public functions -----------------------------------//
			
			//----------------- Event Handlers --------------------------------------------//
			protected function addEventHandlers(event:FlexEvent):void{
				this.addEventListener(MouseEvent.ROLL_OVER, onRollOver);
				mainSchemes.addEventListener(ListEvent.ITEM_ROLL_OVER, onSchemeItemRollOver);
				typeSelector.addEventListener(ListEvent.ITEM_ROLL_OVER, onLanguageTypeItemRollOver);
				andor.addEventListener(ListEvent.ITEM_ROLL_OVER, onLanguageSubOptionsItemRollOver);
				mainSchemes.addEventListener(ListEvent.ITEM_CLICK, onSchemeItemClicked);
				typeSelector.addEventListener(ListEvent.ITEM_CLICK, onLanguageTypeItemClicked);
				andor.addEventListener(ListEvent.ITEM_CLICK, onOptionsItemClicked);
				
			}
			
			protected function onSchemeItemRollOver(event:ListEvent):void{
				var scheme:String = event.itemRenderer.data.toString();
				ArgumentController.getInstance().displayLanguageType(this, scheme);
				displayToolTip(scheme);
			}
			
			protected function onLanguageTypeItemRollOver(event:ListEvent):void{
				var language:String = event.itemRenderer.data.toString();
				ArgumentController.getInstance().updateEnablerText(this, language);
			}
			
			protected function onLanguageSubOptionsItemRollOver(event:ListEvent):void{
				var option:String = event.itemRenderer.data.toString();
				ArgumentController.getInstance().updateEnablerTextWithConjunctions(this, option);
			}
			
			protected function onSchemeItemClicked(event:ListEvent):void{
				var scheme:String = event.itemRenderer.data.toString();
				ArgumentController.getInstance().setSchemeType(this, scheme);
				displayToolTip(scheme);

			}
			
			protected function onLanguageTypeItemClicked(event:ListEvent):void{
				var language:String = event.itemRenderer.data.toString();
				ArgumentController.getInstance().setSchemeLanguageType(this, language);
			}
			
			protected function onOptionsItemClicked(event:ListEvent):void{
				var option:String = event.itemRenderer.data.toString();
				ArgumentController.getInstance().setSchemeLanguageOptionType(this, option);
			}
			protected function onRollOver(event:MouseEvent):void{
				this.parent.setChildIndex(this, parent.numChildren - 1);
			}
			protected function supportPopUp():void{
				
			}
			protected function displayToolTip(scheme:String){
				var schemetoDesc:String;
				if(scheme =="modus ponens") {
					schemetoDesc="MPDesc";
				}else if(scheme =="modus tollens") {
					schemetoDesc="MTDesc";
				}else if(scheme =="EQinferring") {
					schemetoDesc="equivalence";
				}else if(scheme =="DisSylDesc") {
					schemetoDesc="disjunctive syllogism";
				}else if(scheme =="not all syllogism") {
					schemetoDesc="NotAllDesc";
				}else if(scheme =="conditional syllogism") {
					schemetoDesc="CondSylDesc";
				}else if(scheme =="constructive dilemma") {
					schemetoDesc="ConsDilDesc";
				}else if(scheme =="either way") {
					schemetoDesc="EitherWayDesc";
				}
				mainToolTip.text=Language.lookup(schemetoDesc);
				mainToolTip.visible=true;

			}

		]]>
	</fx:Script>
</s:Group>
