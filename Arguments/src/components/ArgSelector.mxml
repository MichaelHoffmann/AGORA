<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="400"
		 creationComplete="addEventHandlers(event)">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<mx:Canvas>
		<mx:List id="mainSchemes"
				 dataProvider="{scheme}"
				 rollOverColor="#b2c4e7"
				 textRollOverColor="#FFFFFF"
				 selectionColor="#5577b8"  
				 focusRoundedCorners="tr br tl bl"
				 paddingLeft="8"
				 labelField="name"/>
				 <!-- itemClick="changeTitle(event)" -->
		
		<mx:List id="typeSelector" 
				 dataProvider="{languageTypes}"
				 x="{mainSchemes.width}"
				 rollOverColor="#b2c4e7"
				 textRollOverColor="#FFFFFF"
				 selectionColor="#5577b8"  
				 visible="false"
				 focusRoundedCorners="tr br tl bl"
				 paddingLeft="8"
				 width="220"/>
		
		<mx:List id="andor" 
				 x="{mainSchemes.width+typeSelector.width}"
				 dataProvider="{options}"
				 rollOverColor="#b2c4e7"
				 textRollOverColor="#FFFFFF"
				 selectionColor="#5577b8"  
				 visible="false"
				 focusRoundedCorners="tr br tl bl"
				 paddingLeft="8"/>
	</mx:Canvas>
	
	<fx:Script>
		<![CDATA[
			import Controller.ArgumentController;
			import Controller.logic.*;
			
			import Model.ArgumentTypeModel;
			
			import flash.events.Event;
			import flash.events.MouseEvent;
			
			import mx.binding.utils.BindingUtils;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
		
			private var _languageTypes:Array;
			private var _scheme:Array;
			private var _options:Array;
			
			private var _argumentTypeModel:ArgumentTypeModel;
			
			
			
			//------------- Getters and Setters -----------------------//

			public function get argumentTypeModel():ArgumentTypeModel
			{
				return _argumentTypeModel;
			}

			public function set argumentTypeModel(value:ArgumentTypeModel):void
			{
				_argumentTypeModel = value;
				//get the infernece and bind it.
				try{
					var panelsHash:Dictionary  = FlexGlobals.topLevelApplication.map.agoraMap.panelsHash;
					var inference:ArgumentPanel = FlexGlobals.topLevelApplication.map.agoraMap.panelsHash[argumentTypeModel.inferenceModel.ID];
					BindingUtils.bindSetter(setX, inference, ["x"]);
					BindingUtils.bindSetter(setY, inference, ["y"]);
				}catch(error:Error){
					trace("ArgSelector::set argumentTypeModel: Error in applying bind setters");	
					trace(error.message);
				}
			}

			[Bindable]
			public function get languageTypes():Array{
				return _languageTypes;
			}
			public function set languageTypes(value:Array):void{
				_languageTypes = value;
			}
			
			[Bindable]
			public function set scheme(value:Array):void
			{
				_scheme = value;
			}
			
			public function get scheme():Array
			{
				return _scheme;
			}
			
			public function get options():Array
			{
				return _options;
			}

			[Bindable]
			public function set options(value:Array):void
			{
				_options = value;
			}
			
			public function init():void{
				
			}
			
			//------------------ Bind Setters ----------------------------------------------//
			protected function setX(value:int):void{
				var inference:ArgumentPanel = FlexGlobals.topLevelApplication.map.agoraMap.panelsHash[argumentTypeModel.inferenceModel.ID];
				x = value + inference.width;
			}
			protected function setY(value:int):void{
				var inference:ArgumentPanel = FlexGlobals.topLevelApplication.map.agoraMap.panelsHash[argumentTypeModel.inferenceModel.ID];
				y = value;
			}
			
			//----------------- Event Handlers --------------------------------------------//
			protected function addEventHandlers(event:FlexEvent):void{
				mainSchemes.addEventListener(ListEvent.ITEM_ROLL_OVER, onSchemeItemRollOver);
				typeSelector.addEventListener(ListEvent.ITEM_ROLL_OVER, onLanguageTypeItemRollOver);
				andor.addEventListener(ListEvent.ITEM_ROLL_OVER, onLanguageSubOptionsItemRollOver);
				mainSchemes.addEventListener(ListEvent.ITEM_CLICK, onSchemeItemClicked);
				typeSelector.addEventListener(ListEvent.ITEM_CLICK, onLanguageTypeItemClicked);
				andor.addEventListener(ListEvent.ITEM_CLICK, onOptionsItemClicked);
				
			}
			
			protected function onSchemeItemRollOver(event:ListEvent):void{
				var scheme:String = event.itemRenderer.data.toString();
				ArgumentController.getInstance().displayLanguageType(this, scheme);
			}
			
			protected function onLanguageTypeItemRollOver(event:ListEvent):void{
				var language:String = event.itemRenderer.data.toString();
				ArgumentController.getInstance().updateEnablerText(this, language);
			}
			
			protected function onLanguageSubOptionsItemRollOver(event:ListEvent):void{
				var option:String = event.itemRenderer.data.toString();
				ArgumentController.getInstance().updateEnablerTextWithConjunctions(this, option);
			}
			
			protected function onSchemeItemClicked(event:ListEvent):void{
				var scheme:String = event.itemRenderer.data.toString();
				ArgumentController.getInstance().setSchemeType(this, scheme);
			}
			
			protected function onLanguageTypeItemClicked(event:ListEvent):void{
				var language:String = event.itemRenderer.data.toString();
				ArgumentController.getInstance().setSchemeLanguageType(this, language);
			}
			
			protected function onOptionsItemClicked(event:ListEvent):void{
				var option:String = event.itemRenderer.data.toString();
				ArgumentController.getInstance().setSchemeLanguageOptionType(this, option);
			}
		
		]]>
	</fx:Script>
</s:Group>
