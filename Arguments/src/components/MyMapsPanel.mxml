<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" skinClass="components.MyMapsSkin" initialize="selectString = MARK_ALL">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Metadata>
		[SkinState("disabled")]
		[SkinState("normal")]
		[SkinState("notLoggedIn")]
		[SkinState("loggedIn")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import classes.MapMetaData;
			import classes.UserData;
			
			import flash.net.URLLoader;
			import flash.net.URLRequest;
			import flash.net.URLRequestMethod;
			import flash.net.URLVariables;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.Text;
			import mx.core.FlexGlobals;
			import mx.managers.CursorManager;
			
			import spark.components.Button;
			import spark.components.Group;
			import spark.components.Label;
			
			import classes.Configure;
			
			//for future
			[Bindable]
			public var mapListXML:XML;
			
			[SkinPart(required="true")]
			public var mapsGroup:Group;
			
			[SkinPart(required="true")]
			public var labelGroup:Group;
			
			[SkinPart(required="true")]
			public var userInfoTxt:Label;
			
			[SkinPart(required="true")]
			public var  selectBtn:Button;
			
			[SkinPart(required="true")]
			public var deleteBtn:Button;
			
			public static const MARK_ALL:String = "Select All";
			public static const UNMARK_ALL:String = "Select None";
			
			[Bindable]
			public var selectString:String;
			
			public function set skinState(value:Boolean):void{
				invalidateSkinState();
			}
			
			override protected function getCurrentSkinState():String{
				if(UserData.isValid()){
					
					return "loggedIn";
				}
				else{
					return "notLoggedIn";	
				}
			}
			
			override protected function commitProperties():void{
				super.commitProperties();
				trace(" In MyMapsPanel: commitProperties" + skin.currentState);
				if( skin.currentState == "loggedIn")
				{ 
					titleDisplay.text = UserData.userNameStr + "'s" + " maps";
					if(mapsGroup.numElements > 0){
						mapsGroup.removeAllElements();
					}	
					var maps:XMLList = mapListXML.map;
					var mapMetaDataVector:Vector.<MapMetaData> = new Vector.<MapMetaData>(0,false);
					for each(var map:XML in maps)
					{
						try{
							if(map.@is_deleted == "1")
							{
								continue;
							}
						}catch(error:Error){
							trace("is_deleted not available yet...");
						}
						
						var mapMetaData:MapMetaData = new MapMetaData();
						mapMetaData.mapID = map.@ID;
						mapMetaData.mapName = map.@title;
						mapMetaDataVector.push(mapMetaData);
					}
					
					mapMetaDataVector.sort(MapMetaData.isGreater);
					
					for each( mapMetaData in mapMetaDataVector){
						var myMapName:MyMapName = new MyMapName;
						myMapName.mapId = mapMetaData.mapID;
						myMapName.mapName = mapMetaData.mapName;
						mapsGroup.addElement(myMapName);	
					}
					selectBtn.enabled = (mapsGroup.numElements == 0)? false:true;
					deleteBtn.enabled = (mapsGroup.numElements == 0)? false:true;
				}
			}
			
			override protected function partAdded(partName:String, instance:Object):void{
			}
			
			
			public function makeSelection(event:MouseEvent):void{
				var mapsMarked:Vector.<MyMapName> = new Vector.<MyMapName>(0,false);
				for(var i:int=0; i < mapsGroup.numElements; i++)
				{
					var myMapName:MyMapName = MyMapName(mapsGroup.getElementAt(i));
					if(selectString == MARK_ALL){
						myMapName.thisMap.selected = true;
					}else{
						myMapName.thisMap.selected = false;
					}	
				}
				
				selectString = (selectString == MARK_ALL)? UNMARK_ALL : MARK_ALL;
				
			}
			
			public function deleteMaps(event:MouseEvent):void{
				selectString = MARK_ALL;
				CursorManager.setBusyCursor();
				FlexGlobals.topLevelApplication
				var mapsMarked:Vector.<MyMapName> = new Vector.<MyMapName>(0,false);
				for(var i:int=0; i < mapsGroup.numElements; i++)
				{
					var myMapName:MyMapName = MyMapName(mapsGroup.getElementAt(i));
					if(myMapName.thisMap.selected){
						mapsMarked.push(myMapName);
					}
				}
				
				if(mapsMarked.length > 0){
					var map:MyMapName = mapsMarked.pop();
					deleteMap(map,mapsMarked);
				}
				else{
					Alert.show("Please use the checkbox to select maps for deletion");
					CursorManager.removeBusyCursor();
				}
				
			}
			
			private function deleteMap(map:MyMapName, mapsMarked:Vector.<MyMapName>):void{
				var xml:XML = new XML("<map id=\""+ map.mapId +"\" remove=\"1\" />");
				var urlRequest:URLRequest = new URLRequest;
				urlRequest.url = Configure.lookup("baseURL") + "remove.php";
				var urlRequestVars:URLVariables = new URLVariables("uid="+UserData.uid+"&"+"pass_hash="+UserData.passHashStr+"&xml="+ xml.toXMLString());
				urlRequest.data = urlRequestVars;
				urlRequest.method = URLRequestMethod.GET;
				var urlLoader:URLLoader = new URLLoader;
				urlLoader.addEventListener(Event.COMPLETE, function (event:Event):void{
					if(mapsMarked.length > 0){
						var tmpMap:MyMapName = mapsMarked.pop();
						deleteMap(tmpMap,mapsMarked);
					}
					else
					{
						CursorManager.removeBusyCursor();
						FlexGlobals.topLevelApplication.loadMyMapList();
						FlexGlobals.topLevelApplication.loadMapList();
						Alert.show("maps deleted ...");
						
					}
				});
				urlLoader.addEventListener( IOErrorEvent.IO_ERROR, function (event:IOErrorEvent):void{Alert.show("Deleting " + map.mapName + " failed ...");});
				urlLoader.load(urlRequest);
			}
			
			
		]]>
	</fx:Script>
</s:Panel>
